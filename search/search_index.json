{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"What is ElectionGuard? ElectionGuard is an open source software development kit (SDK) that improves confidence and participation in elections. It is designed for election system vendors to incorporate end-to-end verifiability into their systems and any interested organization to perform and publish post-election audits . New to ElectionGuard? Welcome! Thanks for your interest. Trying to figure out how to help and learn? If you're a developer, head over to the developer getting started . If you want to help and aren't a developer, all kinds of help with documentation, outreach, and advocacy is welcomed. Follow discussions , join the office hours , and check out the roadmap to see where it's intended to go. Open-Source This library and all linked ElectionGuard projects, are licensed under the MIT license. There is no fee for using ElectionGuard. Security Issues Reporting We encourage the developer and security community to conduct research, report issues, and suggest improvements on this code base. However, unlike performance or feature bugs, please do not report security vulnerabilities in public Github comments. Each repository has a SECURITY file with instructions on responsibly reporting security vulnerabilities under Microsoft's CVD process. Contributing Help defend democracy and contribute to the project . We welcome discussions on our discussions page , feel free to check in and ask your questions and drop your suggestions regarding the specifications over there. Questions ElectionGuard would love for you to ask questions out in the open using Github Issues. If you really want to email the ElectionGuard team, reach out at electionguard@microsoft.com . Thank you A huge thank you to those who have helped us along the way: Josh Benaloh (whose PhD thesis was the genesis of much of this work) Our contributors and community InfernoRed Technology Hart InterCivic MITRE Enhanced Voting VotingWorks Center for Civic Design Oxide Design Many teams within Microsoft","title":"What is ElectionGuard?"},{"location":"#_1","text":"","title":""},{"location":"#what-is-electionguard","text":"ElectionGuard is an open source software development kit (SDK) that improves confidence and participation in elections. It is designed for election system vendors to incorporate end-to-end verifiability into their systems and any interested organization to perform and publish post-election audits . New to ElectionGuard? Welcome! Thanks for your interest. Trying to figure out how to help and learn? If you're a developer, head over to the developer getting started . If you want to help and aren't a developer, all kinds of help with documentation, outreach, and advocacy is welcomed. Follow discussions , join the office hours , and check out the roadmap to see where it's intended to go.","title":"What is ElectionGuard?"},{"location":"#open-source","text":"This library and all linked ElectionGuard projects, are licensed under the MIT license. There is no fee for using ElectionGuard.","title":"Open-Source"},{"location":"#security-issues-reporting","text":"We encourage the developer and security community to conduct research, report issues, and suggest improvements on this code base. However, unlike performance or feature bugs, please do not report security vulnerabilities in public Github comments. Each repository has a SECURITY file with instructions on responsibly reporting security vulnerabilities under Microsoft's CVD process.","title":"Security Issues Reporting"},{"location":"#contributing","text":"Help defend democracy and contribute to the project . We welcome discussions on our discussions page , feel free to check in and ask your questions and drop your suggestions regarding the specifications over there.","title":"Contributing"},{"location":"#questions","text":"ElectionGuard would love for you to ask questions out in the open using Github Issues. If you really want to email the ElectionGuard team, reach out at electionguard@microsoft.com .","title":"Questions"},{"location":"#thank-you","text":"A huge thank you to those who have helped us along the way: Josh Benaloh (whose PhD thesis was the genesis of much of this work) Our contributors and community InfernoRed Technology Hart InterCivic MITRE Enhanced Voting VotingWorks Center for Civic Design Oxide Design Many teams within Microsoft","title":"Thank you"},{"location":"Reports/E2EVerifiability/","text":"End-to-End Verifiability in Real World Elections Check out our newly released report to the Election Assistance Commission. The report provides an overview of the ElectionGuard Pilot in the 2022 Franklin County General Election, and encourages the EAC to consider a different approach to demonstration of a successful e2e-v deployment in a real-world election.","title":"End-to-End Verifiability in Real-World Elections"},{"location":"Reports/E2EVerifiability/#end-to-end-verifiability-in-real-world-elections","text":"Check out our newly released report to the Election Assistance Commission. The report provides an overview of the ElectionGuard Pilot in the 2022 Franklin County General Election, and encourages the EAC to consider a different approach to demonstration of a successful e2e-v deployment in a real-world election.","title":"End-to-End Verifiability in Real World Elections"},{"location":"concepts/Manifest_Building/","text":"Election Manifest There are many types of elections. We need a base set of data that shows how these different types of elections are handled in an ElectionGuard end-to-end verifiable election (or ballot comparison audits). We worked with InfernoRed, VotingWorks, and Dan Wallach of Rice University (thanks folks!) to develop a set of conventions, tests, and sample data (based on a starting dataset sample from the Center for Civic Design) that demonstrate how to encode the information necessary to conduct an election into a format that ElectionGuard can use. The election terms and structure are based whenever possible on the NIST SP-1500-100 Election Results Common Data Format Specification ( PDF ) and the Civics Common Standard Data Specification . The information captured by the NIST standard is codified into an election manifest that defines common elements when conducting an election, such as locations, candidates, parties, contests, and ballot styles. ElectionGuard uses the data contained in the Election Manifest to associate ballots with specific ballot styles and to verify the accuracy of data at different stages of the election process. Note that not all of the data contained in the Election Manifest impacts the computations of tallies and zero-knowledge proofs used in the published election data that demonstrates end-to-end verifiability; however it is important to include as much data as possible in order to distinguish one election from another. With a well-defined Election Manifest, improperly formatted ballot encryption requests will fail with error messages at the moment of initial encryption; the enforcement of any logic or behavior to prevent overvoting or other malformed ballot submissions are handled by the encrypting device, not ElectionGuard. In addition, since json files do not accommodate comments, all notations and exceptions are documented in this readme. Election Data Structure Elections are characterized into types by NIST as shown in the table below: election type description general For an election held typically on the national day for elections. partisan-primary-closed For a primary election that is for a specific party where voter eligibility is based on registration. partisan-primary-open For a primary election that is for a specific party where voter declares desired party or chooses in private. primary For a primary election without a specified type, such as a nonpartisan primary. runoff For an election to decide a prior contest that ended with no candidate receiving a majority of the votes. special For an election held out of sequence for special circumstances, for example, to fill a vacated office. other Used when the election type is not listed in this enumeration. If used, include a specific value of the OtherType element. We present two sample manifests: general and partisan-primary-closed . The core distinction between the two samples is the role of party: in general elections, voters can choose to vote for candidates from any party in a contest, regardless of party affiliation. In partisan primaries, voters can only vote in contests germane to their party declaration or affiliation. As such, special , runoff , and primary election types will follow the general pattern, and partisan-primary-open will follow the partisan-primary-closed pattern. Open primary elections can follow either pattern as determined by their governing rules and regulations. (As noted above, ElectionGuard expects properly-formed ballots; e.g., it would error and fail to encrypt a ballot in an open-primary-closed election if a contest with an incorrect party affiliation were submitted (as indicated by the ).) Ballot Styles and Geography At least in the United States, many complications are introduced by voting simultaneously on election contests that apply in specific geographies and jurisdictions. For example, a single election could include contests for congress, state assembly, school, and utility districts, each with their own geographic boundaries, many that do not respect town or county lines. The ElectionGuard Election Manifest data format is flexible to accommodate most situations, but it is usually up to the election commission and the external system to determine what each component of the manifest actually means. In the following examples, we will work through the process of defining different election types at a high level and describe the process of building the election manifest. Geographic and Ballot Style Breakdown Each election can be thought of as a list of contests that are relevant to a certain group of people in a specific place. In order to determine who is supposed to vote on which contests, we first need to define the geographic jurisdictions where the election is taking place. The NIST Guidelines present an excellent discussion of the geographic interplay of different contests. The diagram from page 12 is presented below. As the diagram shows, congressional, state assembly, school district and other geographic boundaries project onto towns and municipalities in different ways. Elections manage this complexity by creating unique ballot styles that present to voters only the contests that pertain to them. Different jurisdictions use terms such as wards, precincts, and districts to describe the areas of overlap that guide ballot style creation. We will use precinct but ward and district could be used instead. Contests, Candidates and Parties In most cases, a resident of a specific precinct or location will expect to see a certain list of contests that are relevant to them. A contest is a specific collection of available choices ( selections ) from which the voter may choose some subset. For the ElectionGuard Election Manifest, each possible selection in a contest must be associated with a candidate, even for Referendum-style contests. If a contest also supports write-in values, then a write-in candidate is also defined. Candidates may also be associated with specific parties, but this is not required for all election types. Introducing Hamilton County, OZ To help disambiguate, let's explore an example. Geographic Jurisdictions Hamilton County includes 3 townships: LaCroix, Arlington, Harris. The town of LaCroix also has a utility district that comprises its own precinct for special referendums. Arlington has two distinct school districts. The county is also split into two congressional districts, district 5 and district 7. Harris township is entirely within Congressional District 5, but both LaCroix and Arlington are split between congressional districts 5 and 7. ] Building the Geographic Jurisdiction Mapping (Geopolitical Units) The Election Manifest includes an array of objects called geopoliticalUnits (a.k.a. gpUnit ). Each Geopolitical Unit must include the following fields: objectId - a unique identifier for the gpUnit. This value is used to map a contest to a specific jurisdiction name - the friendly name of the gp Unit type - they type of jurisdiction (one of the Reporting Unit Types ) contact information - the contact info for the geopolitical unit Geopolitical units are polygons on a map represented by legal jurisdictions. In our example Election Manifest for hamilton County, there is one geopolitical unit for each jurisdictional boundary in the image above: Hamilton County Congressional District 5 congressional District 7 LaCroix Township Exeter Utility District (within LaCroix Township) Harris Township Arlington Township Pismo Beach School District (within Arlington Township) Somerset School District (within Arlington Township) When defining the geopolitical units for an election, we define all of the possible geopolitical units for an election; even if there are no contests for a specific jurisdiction. This way, if contests are added or removed during the setup phase, you do not also have to remember to update the list of geopolitical units. Alternatively, you can define only the GP Units for which there are contests. The General Election Contests A general election will occur in Hamilton County. The county is voting along with the rest of the province, and the county is responsible for tabulating its own election results. This means that the Election Scope is defined at the county level. For the general election, the following sets of contests (and associated geographic boundaries) obtain: The National Contests - President and Vice President. This contest demonstrates a \"vote for the ticket\" and allows write-ins Province Contests - Governor - this contest demonstrates a long list of candidate names Congressional Contests - Congress Districts 5 and 7 - these contests demonstrate how to split a district using multiple ballot styles Township Contests - Retain Chief Justice - This contest demonstrates a contest that applies to a specific town whose boundaries are split across multiple ballot styles School District Contests - School Board - these contests demonstrate contests with multiple selections ( n-of-m ) and allow write-ins School Board, and Utility district referendum to show ballot style splits Utility District Contest - Utility District - This contest demonstrates a referendum-style contest with long descriptions and display language translation into Spanish Each contest must be associated with exactly ONE electoralDistrictId . The electoralDistrictId field on the contest is populated with the objectId of the associated Geopolitical Unit (e.g. the Contest congress-district-7-contest has the electoralDistrictId congress-district-7 Each contest must also define a sequenceOrder . the sequence order is an indexing mechanism used internally. It is not the sequence that the contests are displayed to the user . The order in which contests are displayed to the user is up to the implementing application. The General Election Ballot Styles A ballot style is the set of contests that a specific voter should see on their ballot for a given location. The ballot style is associated to the set of geopolitical units relevant to a specific point on a map. Since each contest is also associated with a geopolitical unit, a mapping is created between a point on a map and the contests that are relevant to that point. For instance, a voter that lives in the Exeter Utility District should see contests that are relevant to Congressional District 7, LaCroix Township and the Exeter Utility District. | Geopolitical Units are overlapping polygons, and ballot styles are the list of polygons relevant to a specific point on the map. Similar to Geopolitical Units, we define all of the possible ballot styles for an election in our example, even if there are no contests specific to a ballot style. This is subjective and the behavior may be different for the integrating system: Congressional District 7 Outside Any Township Congressional District 7 LaCroix Township Congressional District 7 LaCroix Township Exeter Utility District Congressional District 7 Arlington Township Congressional District 7 Arlington Township Pismo Beach School district Congressional District 7 Arlington Township Somerset School district Congressional District 5 Outside Any Township Congressional District 5 LaCroix Township Congressional District 5 Harris Township Congressional District 5 Arlington Township Pismo Beach School district Congressional District 5 Arlington Township Somerset School district By defining all of the possible ballot styles and all of the possible geopolitical units, we ensure that if a contest is added or removed, we only have to make sure the contest is correct. We do not have to modify the list of geopolitical units or ballot styles. Data Flexibility The relationship between a ballot style and the contests that are displayed on it are subjective to the implementing application. This example is just one way to define this relationship that is purposefully verbose. For instance, in our example we define a geopolitical unit as a set of overlapping polygons, and a ballot style as the intersection of those polygons at a specific point. This is a top-down approach. Alternatively, we could have defined a geopolitical unit as the intersection area of those polygons and mapped one ballot style to each geopolitical unit 1 to 1. for instance, instead of defining a single GP Unit each for: Congressional District 5, Congressional District 7, LaCroix Township, Exeter Utility district, etc; we could have instead defined the GP Units as: Congressional District 5 No Township Congressional District 7 No Township Congressional District 5 inside LaCroix Congressional District 5 Inside LaCroix and Exeter, etc. Then, instead of each Ballot Style having multiple GP Units, each ballot style would have applied to exactly one GP Unit. Data Validation When the election Manifest is loaded into ElectionGuard, its validity is checked semantically against the data format required to conduct an ElectionGuard Election. Specifically, we check that: Each Geopolitical Unit has a unique objectId Each Ballot Style maps to at least one valid Geopolitical Unit Each Party has a unique objectId Each Candidate either does not have a party, or is associated with a valid party Each Contest has a unique Sequence Order Each Contest is associated with exactly one valid Geopolitical Unit Each Contest has a valid number of Selections for the number of seats in the contest Each Selection on each Contest is associated with a valid Candidate as long as the election manifest format matches the validation criteria, the election can proceed as an ElectionGuard election. Frequently Asked Questions Q: What if my ballot styles are not associated with geopolitical units? A: There are a few ways to handle this. In most cases, you can simply map the ballot style 1 to 1 to the geopolitical unit. for instance, if ballot-style-1 includes contest-1 then you may create geopolitical-unit-1 and associate both the ballot style and the contest to that geopolitical unit. This documentation is under review and subject to change. Please do not hesitate to open a github issue if you have questions, or find errors or omissions.","title":"Creating an Election Manifest"},{"location":"concepts/Manifest_Building/#election-manifest","text":"There are many types of elections. We need a base set of data that shows how these different types of elections are handled in an ElectionGuard end-to-end verifiable election (or ballot comparison audits). We worked with InfernoRed, VotingWorks, and Dan Wallach of Rice University (thanks folks!) to develop a set of conventions, tests, and sample data (based on a starting dataset sample from the Center for Civic Design) that demonstrate how to encode the information necessary to conduct an election into a format that ElectionGuard can use. The election terms and structure are based whenever possible on the NIST SP-1500-100 Election Results Common Data Format Specification ( PDF ) and the Civics Common Standard Data Specification . The information captured by the NIST standard is codified into an election manifest that defines common elements when conducting an election, such as locations, candidates, parties, contests, and ballot styles. ElectionGuard uses the data contained in the Election Manifest to associate ballots with specific ballot styles and to verify the accuracy of data at different stages of the election process. Note that not all of the data contained in the Election Manifest impacts the computations of tallies and zero-knowledge proofs used in the published election data that demonstrates end-to-end verifiability; however it is important to include as much data as possible in order to distinguish one election from another. With a well-defined Election Manifest, improperly formatted ballot encryption requests will fail with error messages at the moment of initial encryption; the enforcement of any logic or behavior to prevent overvoting or other malformed ballot submissions are handled by the encrypting device, not ElectionGuard. In addition, since json files do not accommodate comments, all notations and exceptions are documented in this readme.","title":"Election Manifest"},{"location":"concepts/Manifest_Building/#election-data-structure","text":"Elections are characterized into types by NIST as shown in the table below: election type description general For an election held typically on the national day for elections. partisan-primary-closed For a primary election that is for a specific party where voter eligibility is based on registration. partisan-primary-open For a primary election that is for a specific party where voter declares desired party or chooses in private. primary For a primary election without a specified type, such as a nonpartisan primary. runoff For an election to decide a prior contest that ended with no candidate receiving a majority of the votes. special For an election held out of sequence for special circumstances, for example, to fill a vacated office. other Used when the election type is not listed in this enumeration. If used, include a specific value of the OtherType element. We present two sample manifests: general and partisan-primary-closed . The core distinction between the two samples is the role of party: in general elections, voters can choose to vote for candidates from any party in a contest, regardless of party affiliation. In partisan primaries, voters can only vote in contests germane to their party declaration or affiliation. As such, special , runoff , and primary election types will follow the general pattern, and partisan-primary-open will follow the partisan-primary-closed pattern. Open primary elections can follow either pattern as determined by their governing rules and regulations. (As noted above, ElectionGuard expects properly-formed ballots; e.g., it would error and fail to encrypt a ballot in an open-primary-closed election if a contest with an incorrect party affiliation were submitted (as indicated by the ).)","title":"Election Data Structure"},{"location":"concepts/Manifest_Building/#ballot-styles-and-geography","text":"At least in the United States, many complications are introduced by voting simultaneously on election contests that apply in specific geographies and jurisdictions. For example, a single election could include contests for congress, state assembly, school, and utility districts, each with their own geographic boundaries, many that do not respect town or county lines. The ElectionGuard Election Manifest data format is flexible to accommodate most situations, but it is usually up to the election commission and the external system to determine what each component of the manifest actually means. In the following examples, we will work through the process of defining different election types at a high level and describe the process of building the election manifest.","title":"Ballot Styles and Geography"},{"location":"concepts/Manifest_Building/#geographic-and-ballot-style-breakdown","text":"Each election can be thought of as a list of contests that are relevant to a certain group of people in a specific place. In order to determine who is supposed to vote on which contests, we first need to define the geographic jurisdictions where the election is taking place. The NIST Guidelines present an excellent discussion of the geographic interplay of different contests. The diagram from page 12 is presented below. As the diagram shows, congressional, state assembly, school district and other geographic boundaries project onto towns and municipalities in different ways. Elections manage this complexity by creating unique ballot styles that present to voters only the contests that pertain to them. Different jurisdictions use terms such as wards, precincts, and districts to describe the areas of overlap that guide ballot style creation. We will use precinct but ward and district could be used instead.","title":"Geographic and Ballot Style Breakdown"},{"location":"concepts/Manifest_Building/#contests-candidates-and-parties","text":"In most cases, a resident of a specific precinct or location will expect to see a certain list of contests that are relevant to them. A contest is a specific collection of available choices ( selections ) from which the voter may choose some subset. For the ElectionGuard Election Manifest, each possible selection in a contest must be associated with a candidate, even for Referendum-style contests. If a contest also supports write-in values, then a write-in candidate is also defined. Candidates may also be associated with specific parties, but this is not required for all election types.","title":"Contests, Candidates and Parties"},{"location":"concepts/Manifest_Building/#introducing-hamilton-county-oz","text":"To help disambiguate, let's explore an example.","title":"Introducing Hamilton County, OZ"},{"location":"concepts/Manifest_Building/#geographic-jurisdictions","text":"Hamilton County includes 3 townships: LaCroix, Arlington, Harris. The town of LaCroix also has a utility district that comprises its own precinct for special referendums. Arlington has two distinct school districts. The county is also split into two congressional districts, district 5 and district 7. Harris township is entirely within Congressional District 5, but both LaCroix and Arlington are split between congressional districts 5 and 7. ]","title":"Geographic Jurisdictions"},{"location":"concepts/Manifest_Building/#building-the-geographic-jurisdiction-mapping-geopolitical-units","text":"The Election Manifest includes an array of objects called geopoliticalUnits (a.k.a. gpUnit ). Each Geopolitical Unit must include the following fields: objectId - a unique identifier for the gpUnit. This value is used to map a contest to a specific jurisdiction name - the friendly name of the gp Unit type - they type of jurisdiction (one of the Reporting Unit Types ) contact information - the contact info for the geopolitical unit Geopolitical units are polygons on a map represented by legal jurisdictions. In our example Election Manifest for hamilton County, there is one geopolitical unit for each jurisdictional boundary in the image above: Hamilton County Congressional District 5 congressional District 7 LaCroix Township Exeter Utility District (within LaCroix Township) Harris Township Arlington Township Pismo Beach School District (within Arlington Township) Somerset School District (within Arlington Township) When defining the geopolitical units for an election, we define all of the possible geopolitical units for an election; even if there are no contests for a specific jurisdiction. This way, if contests are added or removed during the setup phase, you do not also have to remember to update the list of geopolitical units. Alternatively, you can define only the GP Units for which there are contests.","title":"Building the Geographic Jurisdiction Mapping (Geopolitical Units)"},{"location":"concepts/Manifest_Building/#the-general-election-contests","text":"A general election will occur in Hamilton County. The county is voting along with the rest of the province, and the county is responsible for tabulating its own election results. This means that the Election Scope is defined at the county level. For the general election, the following sets of contests (and associated geographic boundaries) obtain: The National Contests - President and Vice President. This contest demonstrates a \"vote for the ticket\" and allows write-ins Province Contests - Governor - this contest demonstrates a long list of candidate names Congressional Contests - Congress Districts 5 and 7 - these contests demonstrate how to split a district using multiple ballot styles Township Contests - Retain Chief Justice - This contest demonstrates a contest that applies to a specific town whose boundaries are split across multiple ballot styles School District Contests - School Board - these contests demonstrate contests with multiple selections ( n-of-m ) and allow write-ins School Board, and Utility district referendum to show ballot style splits Utility District Contest - Utility District - This contest demonstrates a referendum-style contest with long descriptions and display language translation into Spanish Each contest must be associated with exactly ONE electoralDistrictId . The electoralDistrictId field on the contest is populated with the objectId of the associated Geopolitical Unit (e.g. the Contest congress-district-7-contest has the electoralDistrictId congress-district-7 Each contest must also define a sequenceOrder . the sequence order is an indexing mechanism used internally. It is not the sequence that the contests are displayed to the user . The order in which contests are displayed to the user is up to the implementing application.","title":"The General Election Contests"},{"location":"concepts/Manifest_Building/#the-general-election-ballot-styles","text":"A ballot style is the set of contests that a specific voter should see on their ballot for a given location. The ballot style is associated to the set of geopolitical units relevant to a specific point on a map. Since each contest is also associated with a geopolitical unit, a mapping is created between a point on a map and the contests that are relevant to that point. For instance, a voter that lives in the Exeter Utility District should see contests that are relevant to Congressional District 7, LaCroix Township and the Exeter Utility District. | Geopolitical Units are overlapping polygons, and ballot styles are the list of polygons relevant to a specific point on the map. Similar to Geopolitical Units, we define all of the possible ballot styles for an election in our example, even if there are no contests specific to a ballot style. This is subjective and the behavior may be different for the integrating system: Congressional District 7 Outside Any Township Congressional District 7 LaCroix Township Congressional District 7 LaCroix Township Exeter Utility District Congressional District 7 Arlington Township Congressional District 7 Arlington Township Pismo Beach School district Congressional District 7 Arlington Township Somerset School district Congressional District 5 Outside Any Township Congressional District 5 LaCroix Township Congressional District 5 Harris Township Congressional District 5 Arlington Township Pismo Beach School district Congressional District 5 Arlington Township Somerset School district By defining all of the possible ballot styles and all of the possible geopolitical units, we ensure that if a contest is added or removed, we only have to make sure the contest is correct. We do not have to modify the list of geopolitical units or ballot styles.","title":"The General Election Ballot Styles"},{"location":"concepts/Manifest_Building/#data-flexibility","text":"The relationship between a ballot style and the contests that are displayed on it are subjective to the implementing application. This example is just one way to define this relationship that is purposefully verbose. For instance, in our example we define a geopolitical unit as a set of overlapping polygons, and a ballot style as the intersection of those polygons at a specific point. This is a top-down approach. Alternatively, we could have defined a geopolitical unit as the intersection area of those polygons and mapped one ballot style to each geopolitical unit 1 to 1. for instance, instead of defining a single GP Unit each for: Congressional District 5, Congressional District 7, LaCroix Township, Exeter Utility district, etc; we could have instead defined the GP Units as: Congressional District 5 No Township Congressional District 7 No Township Congressional District 5 inside LaCroix Congressional District 5 Inside LaCroix and Exeter, etc. Then, instead of each Ballot Style having multiple GP Units, each ballot style would have applied to exactly one GP Unit.","title":"Data Flexibility"},{"location":"concepts/Manifest_Building/#data-validation","text":"When the election Manifest is loaded into ElectionGuard, its validity is checked semantically against the data format required to conduct an ElectionGuard Election. Specifically, we check that: Each Geopolitical Unit has a unique objectId Each Ballot Style maps to at least one valid Geopolitical Unit Each Party has a unique objectId Each Candidate either does not have a party, or is associated with a valid party Each Contest has a unique Sequence Order Each Contest is associated with exactly one valid Geopolitical Unit Each Contest has a valid number of Selections for the number of seats in the contest Each Selection on each Contest is associated with a valid Candidate as long as the election manifest format matches the validation criteria, the election can proceed as an ElectionGuard election.","title":"Data Validation"},{"location":"concepts/Manifest_Building/#frequently-asked-questions","text":"Q: What if my ballot styles are not associated with geopolitical units? A: There are a few ways to handle this. In most cases, you can simply map the ballot style 1 to 1 to the geopolitical unit. for instance, if ballot-style-1 includes contest-1 then you may create geopolitical-unit-1 and associate both the ballot style and the contest to that geopolitical unit. This documentation is under review and subject to change. Please do not hesitate to open a github issue if you have questions, or find errors or omissions.","title":"Frequently Asked Questions"},{"location":"concepts/Structure_and_Processes/","text":"Structure and Processes ElectionGuard provides tools to enable end-to-end verifiable elections. This allows voters to check for themselves that their votes have been accurately counted. The ElectionGuard process has three principal components. Pre-election key generation Ballot encryption Post-election decryption of tallies Pre-Election Key Generation ElectionGuard utilizes Guardians to protect confidentiality of ballots. The Guardians independently generate public-private key pairs from public election parameters. flowchart TD A(\"Guardian T 1 (K 1 ,S 1 )\")-->B(K 1 ); C(\"Guardian T 2 (K 2 ,S 2 )\")-->D(K 2 ); E(\"Guardian T n (K n ,S n )\")-->F(K n ); style B fill:#FFFFFF00,stroke:#FFFFFF00 style D fill:#FFFFFF00,stroke:#FFFFFF00 style F fill:#FFFFFF00,stroke:#FFFFFF00 The individual public keys are then combined to form the election public key using simple multiplication. \\[ K=\\prod_{i=1}^{n} K_i \\] At this point in the process, the only way to decrypt data encrypted with the election public key K is for all n Guardians to individually apply their secret keys. This situation is fragile since a single missing Guardian will prevent an election from being completed. To remedy this, as the final pre-election step, the Guardians distribute to each other shares of their private keys. The sharing is done according to a pre-determined quorum parameter k and will allow any quorum set of k Guardians to complete a decryption. graph LR A(\"Guardian T 1 (K 1 ,S 1 )\")-->|S 1,2 |B(\"Guardian T 2 (K 2 ,S 2 )\"); B-->|S 2,1 |A; A-->|S 1,n |C(\"Guardian T n (K n ,S n )\"); B-->|S 2,n |C; C-->|S n,2 |B; C-->|S n,1 |A; Balot Encryption An encrypted ballot consists entirely of encryptions of zeros and ones. A simple clear form ballot with a single contest might look something like the following. \\[ \\braket{{\\color{RoyalBlue} 0,1,0,0}} \\] This would represent a ballot with a single contest in which the second of four options has been selected. The encrypted version of this ballot would consist of four encrypted values \\[ \\braket{C_1,C_2,C_3,C_4} \\] accompanied by \"proofs\" that each W_i is an encryption of either zero or one. But this is not enough to show that an encrypted ballot represents a legitimate vote because the clear form might be as follows. \\[ \\braket{{\\color{RoyalBlue} 0,1,0,1}} \\] The above ballot would indicate votes for both the second and fourth options, and this may not be allowed. To address this, we use the homomorphic property of the encryption which allows us to combine encryptions to produce an encryption of the sum. By using simple encryption, we can form a new encrypted value as \\[ C=\\prod_{i=1}^{4} C_i \\] and include a proof that this W is an encryption of one to show that the ballot doesn\u2019t include excessive votes. Placeholders This isn\u2019t quite everything we need, because a voter might choose to not vote in a contest. The resulting clear form of this ballot would look like the following. \\[ \\braket{{\\color{RoyalBlue} 0,0,0,0}} \\] If we were to homomorphically combine values in an encrypted form of this ballot, we would get an encryption of zero \u2013 not an encryption of one. We wouldn\u2019t want to reveal this fact, because even a voter who chooses not to vote deserves privacy. To address this, we add a placeholder option to each contest that can be thought of as a \"none of the above\" vote. So a contest with four options would be typically be represented by a ballot with five positions \u2013 with the fifth option set to one if the voter selects none of the four options offered. \\[ \\braket{{\\color{RoyalBlue} 0,0,0,0},{\\color{SkyBlue} 1}} \\] [Color changes are for exposition only.] Internally, a placeholder option looks no different from an ordinary option. But we can now ensure that a homomorphic combination of all of the encryptions on a ballot will be one. An encrypted ballot can now be shown to be legitimate by proving that each value is an encryption of either zero and one and the homomorphic combination of all of the encryptions in each contest is an encryption of one. \\[ \\braket{{\\color{RoyalBlue} 0,0,0,0},{\\color{SkyBlue} 1}} \\longrightarrow {\\color{DarkBlue} 1} \\] Some might recognize this as a \"map-reduce\" operation (or for those familiar with Kenneth Iverson's APL, a simple reduction operation). The operator applied to encrypted values is simple multiplication. But the effect is to produce an encryption of the sum of the clear form values. Selection Limits There is one further generalization that must be accommodated. In some elections, there are contests where a voter is allowed to select more than one option. For example, there might be five options of which a voter is allowed to select up to three. To accommodate this possibility, we note the selection limit for each contest and generalize the use of placeholders. In most elections, all or most contests will have a selection limit of one, and one placeholder option will be added to each such contest. However, if the selection limit is higher, additional placeholder values are added \u2013 with the total number of placeholders matching the selection limit. For example, a \"choose up to three of five\" contest will be captured with eight encrypted values, the first five of which match the selections that can be made by a voter, and the last three of which are placeholder values that can be set if a voter does not make the maximum number of selections. The following offers some examples of how the clear form of a choose three of five ballot might be set. \\[\\begin{align} \\braket{{\\color{RoyalBlue} 1,0,0,1,1,}{\\color{SkyBlue}0,0,0}} \\longrightarrow {\\color{DarkBlue}3} \\\\ \\braket{{\\color{RoyalBlue} 0,1,1,0,1,}{\\color{SkyBlue}0,0,0}} \\longrightarrow {\\color{DarkBlue}3} \\\\ \\braket{{\\color{RoyalBlue} 1,0,0,1,0,}{\\color{SkyBlue} 0,0,1}}\\longrightarrow {\\color{DarkBlue}3} \\\\ \\braket{{\\color{RoyalBlue} 0,0,0,1,0,}{\\color{SkyBlue} 0,1,1}} \\longrightarrow {\\color{DarkBlue}3} \\\\ \\braket{{\\color{RoyalBlue}0,0,0,0,0,}{\\color{SkyBlue} 1,1,1}} \\longrightarrow {\\color{DarkBlue}3} \\\\ \\end{align}\\] [Color changes are for exposition only.] The first two instance represent ballots in which all three allowed votes have been used; the next instance shows a ballot in which only two options were selected; the following ballot instance contains one selection (and two placeholders set); and the final instance shows a case when a voter has made no selections and all three placeholders are used. In all of the above examples, an associated encrypted ballot is shown to be legitimate by showing that every value is an encryption of zero or one and the homomorphic combination of all of the encryptions produces an encryption of three. Write-in Votes ElectionGuard currently does not distinguish between write-ins. If a write-in option is offered, ElectionGuard treats it as any other selection. ElectionGuard tallies the number of write-ins for any contest without indicating what was written in. Multiple Contests Most elections consist of more than a single contest. A single ballot can therefore include multiple contests. An encrypted ballot still consists entirely of encryptions of zeros and ones, but the interpretation of these encryptions and the accompanying proofs depend upon details provided in the ballot manifest. \\[ \\braket{{\\color{RoyalBlue} 0,1,0,}{\\color{SkyBlue} 0};{\\color{ForestGreen} 1,0,}{\\color{YellowGreen} 0};{\\color{RoyalBlue} 0,0,}{\\color{SkyBlue} 1};{\\color{ForestGreen} 1,0,1,0,0,}{\\color{YellowGreen} 0,0,1}} \\] [Color changes are for exposition only.] The above example shows a clear form of a ballot with four contests in which the second of three options is selected in the first contest (with the fourth position as an unused placeholder), the first of two options is chosen in the second contest (with the third position as an unused placeholder), neither of two options is selected in the third contest (with the placeholder set to one), and the first and third option selected in a \"three of five\" fourth contest with one of three placeholders set to one. The encrypted form of the example above should be accompanied by proofs that all eighteen of the components are encryptions of zero or one, that the first four encryptions homomorphically combine to form an encryption of one, the next three encryptions homomorphically combine to form an encryption of one, the following three encryptions homomorphically combine to form an encryption of one, and the final eight encryptions homomorphically combine to form an encryption of three. Post-Election Decryption of Tallies When an election is complete, there will be a set of encrypted ballots that have been cast by voters and will be published in the election record. The homomorphic property that is used within individual ballots to show that the number of selected options for each contest is correct can also be used across ballots to compute tallies. For example, suppose that the five clear form ballots shown above as samples in a choose-three-of-five contest represent actual ballots cast in an election. \\[\\begin{align} \\braket{{\\color{RoyalBlue} 1,0,0,1,1,}{\\color{SkyBlue} 0,0,0}} \\\\ \\braket{{\\color{RoyalBlue} 0,1,1,0,1,}{\\color{SkyBlue} 0,0,0}} \\\\ \\braket{{\\color{RoyalBlue} 1,0,0,1,0,}{\\color{SkyBlue} 0,0,1}} \\\\ \\braket{{\\color{RoyalBlue} 0,0,0,1,0,}{\\color{SkyBlue} 0,1,1}} \\\\ \\braket{{\\color{RoyalBlue} 0,0,0,0,0,}{\\color{SkyBlue} 1,1,1}} \\\\ \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\\\ \\braket{{\\color{RoyalBlue} 2,1,1,3,2,}{\\color{SkyBlue} 1,2,3}} \\\\ \\end{align}\\] Verifiable Decryption Guardians can each apply their private keys to an encrypted value to perform a partial decryption. graph TD A(\"Guardian T 1 (K 1 ,S 1 )\")-->B(M 1 ); C(\"Guardian T 2 (K 2 ,S 2 )\")-->D(M 2 ); A1(C)-->A; C1(C)-->C; E(\"Guardian T n (K n ,S n )\")-->F(M n ); E1(C)-->E; style B fill:#FFFFFF00,stroke:#FFFFFF00 style D fill:#FFFFFF00,stroke:#FFFFFF00 style C1 fill:#FFFFFF00,stroke:#FFFFFF00 style A1 fill:#FFFFFF00,stroke:#FFFFFF00 style E1 fill:#FFFFFF00,stroke:#FFFFFF00 style F fill:#FFFFFF00,stroke:#FFFFFF00 The partial decryptions \\(M_i\\) can be combined \u2013 again using ordinary multiplication \u2013 to form the full decryption. \\[ M = \\prod _{i=1} ^n M_i \\] Together with each partial decryption, each guardian produces additional data that can be used by observers to very that the decryptions are correct. Missing Guardians If one or more Guardians are missing during a decryption, a quorum of any \\(k\\) available Guardians can form the partial decryption of the missing Guardian. graph TD A(\"Guardian T i 1 S j,i 1 \")-->B(M j,i 1 ); C(\"Guardian T i 2 S j,i 2 \")-->D(M j,i 2 ); A1(C)-->A; C1(C)-->C; E(\"Guardian T i k S j,i k \")-->F(M j,i k ); E1(C)-->E; style B fill:#FFFFFF00,stroke:#FFFFFF00 style D fill:#FFFFFF00,stroke:#FFFFFF00 style C1 fill:#FFFFFF00,stroke:#FFFFFF00 style A1 fill:#FFFFFF00,stroke:#FFFFFF00 style E1 fill:#FFFFFF00,stroke:#FFFFFF00 style F fill:#FFFFFF00,stroke:#FFFFFF00 The \\(k\\) values \\(M_{j,i_{1}},M_{j,i_{2}}, ... ,M_{j,i_{k}},\\) can be combined to calculate the missing partial decryption. In this way, an aggregate ballot can be fully and verifiably decrypted by any quorum set of \\(k\\) Guardians. Casting and Spoiling Voters need to be provided with a mechanism to encrypt their selections and have confidence that their selections have been correctly encrypted. The process used by ElectionGuard is to encrypt ballots as instructed by voters and then to allow voters to optionally spoil encrypted ballots. A spoiled ballot is verifiably decrypted (as with the aggregate ballot above), and the voter is given the opportunity to cast a new ballot. graph TD id[Make Selections]-->id1[Have Ballot Encrypted]; id1-->id2[Choose Cast or Spoil]; id2-->|Cast| id3[Record Encrypted Ballot as Cast]; id2-->|Spoil| id4[Decrypt Ballot and Record it as Spoiled]; id4-->id; The Election Record Once voting is complete, an election record is published containing all of the following artifacts. All cast encrypted ballot Proofs that all cast encrypted ballots are properly formed A tally ballot formed as the homomorphic aggregation of all cast ballots A verifiable decryption of the tally ballot All spoiled ballots Verifiable decryptions of all spoiled ballots Cast Ballots: #tb1 td{ border-width:0.5px; border-style:solid; border-color:#3d414b; text-align: center; vertical-align: middle } #tb1 th{ border-width:0.5px;border-style:solid; text-align: center; border-color:#3d414b; vertical-align: middle; height:20px } .hd{text-align:center;vertical-align:top} .em{background-color:#0E84EE} .lm{background-color:#1fccff} #tb1 #rm .em{border-left:none;border-right:none;background-color:transparent} Contest1 Contest2 Contest3 Encrypted Ballot 1 Proof of Correct Form Encrypted Ballot 2 Proof of Correct Form Encrypted Ballot 3 Proof of Correct Form Encrypted Ballot 4 Proof of Correct Form Encrypted Ballot 5 Proof of Correct Form Encrypted Ballot 6 Proof of Correct Form x x x x x x x x x x x x Encrypted Tally Decrypted Tally 3 1 2 1 2 3 0 2 2 1 1 3 Proof of Correct Decryption Spoiled Ballot 1: table td{ border-width:0.5px; border-style:solid; border-color:#3d414b; text-align: center; vertical-align: middle } table th{ border-width:0.5px;border-style:solid; text-align: center; border-color:#3d414b; vertical-align: middle; height:20px } Contest1 Contest2 Contest3 Encrypted Ballot Decrypted Ballot 0 1 0 0 1 0 0 0 0 0 0 1 Proof of Correct Decryption Spoiled Ballot 2: Contest1 Contest2 Contest3 Encrypted Ballot Decrypted Ballot 1 0 0 0 0 0 1 1 1 0 0 0 Proof of Correct Decryption Spoiled Ballot 3: Contest1 Contest2 Contest3 Encrypted Ballot Decrypted Ballot 1 0 0 0 0 0 0 1 0 0 0 1 Proof of Correct Decryption Spoiled Ballot 4: Contest1 Contest2 Contest3 Encrypted Ballot Decrypted Ballot 0 0 1 0 0 1 0 0 0 1 0 0 Proof of Correct Decryption Verification Voters are able to verify that their own ballots have been correctly recorded by utilizing the ballot spoiling process described above. Anyone can verify that recorded ballots have been accurately tallied by verifying the following items. For each cast ballot, the proof that the ballot is properly formed The tally ballot is the homomorphic aggregation of all cast ballots The proof that the aggregate tally ballot has been correctly decrypted In addition, the election record contains spoiled ballots for which the following should be verified. The proof of the correct decryption of each spoiled ballot Each spoiled ballot is properly formed (this can be done by checking proofs of proper formation or simply by inspecting the decryption) Although logically, the verification of correct decryption of spoiled ballots can be done by the individual voters who spoiled those ballots as part of the verification of correct recording; practically, this process closely matches the process of verifying correct decryption of the aggregate tally ballot. By transferring this responsibility to those verifying the election record, voters who want to verify correct recording of their ballots can be relieved of the responsibility of writing/executing code to check the decryption arithmetic and can instead check merely whether the claimed decryptions of spoiled ballots match their expectations.","title":"Structures and Processes"},{"location":"concepts/Structure_and_Processes/#structure-and-processes","text":"ElectionGuard provides tools to enable end-to-end verifiable elections. This allows voters to check for themselves that their votes have been accurately counted. The ElectionGuard process has three principal components. Pre-election key generation Ballot encryption Post-election decryption of tallies","title":"Structure and Processes"},{"location":"concepts/Structure_and_Processes/#pre-election-key-generation","text":"ElectionGuard utilizes Guardians to protect confidentiality of ballots. The Guardians independently generate public-private key pairs from public election parameters. flowchart TD A(\"Guardian T 1 (K 1 ,S 1 )\")-->B(K 1 ); C(\"Guardian T 2 (K 2 ,S 2 )\")-->D(K 2 ); E(\"Guardian T n (K n ,S n )\")-->F(K n ); style B fill:#FFFFFF00,stroke:#FFFFFF00 style D fill:#FFFFFF00,stroke:#FFFFFF00 style F fill:#FFFFFF00,stroke:#FFFFFF00 The individual public keys are then combined to form the election public key using simple multiplication. \\[ K=\\prod_{i=1}^{n} K_i \\] At this point in the process, the only way to decrypt data encrypted with the election public key K is for all n Guardians to individually apply their secret keys. This situation is fragile since a single missing Guardian will prevent an election from being completed. To remedy this, as the final pre-election step, the Guardians distribute to each other shares of their private keys. The sharing is done according to a pre-determined quorum parameter k and will allow any quorum set of k Guardians to complete a decryption. graph LR A(\"Guardian T 1 (K 1 ,S 1 )\")-->|S 1,2 |B(\"Guardian T 2 (K 2 ,S 2 )\"); B-->|S 2,1 |A; A-->|S 1,n |C(\"Guardian T n (K n ,S n )\"); B-->|S 2,n |C; C-->|S n,2 |B; C-->|S n,1 |A;","title":"Pre-Election Key Generation"},{"location":"concepts/Structure_and_Processes/#balot-encryption","text":"An encrypted ballot consists entirely of encryptions of zeros and ones. A simple clear form ballot with a single contest might look something like the following. \\[ \\braket{{\\color{RoyalBlue} 0,1,0,0}} \\] This would represent a ballot with a single contest in which the second of four options has been selected. The encrypted version of this ballot would consist of four encrypted values \\[ \\braket{C_1,C_2,C_3,C_4} \\] accompanied by \"proofs\" that each W_i is an encryption of either zero or one. But this is not enough to show that an encrypted ballot represents a legitimate vote because the clear form might be as follows. \\[ \\braket{{\\color{RoyalBlue} 0,1,0,1}} \\] The above ballot would indicate votes for both the second and fourth options, and this may not be allowed. To address this, we use the homomorphic property of the encryption which allows us to combine encryptions to produce an encryption of the sum. By using simple encryption, we can form a new encrypted value as \\[ C=\\prod_{i=1}^{4} C_i \\] and include a proof that this W is an encryption of one to show that the ballot doesn\u2019t include excessive votes.","title":"Balot Encryption"},{"location":"concepts/Structure_and_Processes/#placeholders","text":"This isn\u2019t quite everything we need, because a voter might choose to not vote in a contest. The resulting clear form of this ballot would look like the following. \\[ \\braket{{\\color{RoyalBlue} 0,0,0,0}} \\] If we were to homomorphically combine values in an encrypted form of this ballot, we would get an encryption of zero \u2013 not an encryption of one. We wouldn\u2019t want to reveal this fact, because even a voter who chooses not to vote deserves privacy. To address this, we add a placeholder option to each contest that can be thought of as a \"none of the above\" vote. So a contest with four options would be typically be represented by a ballot with five positions \u2013 with the fifth option set to one if the voter selects none of the four options offered. \\[ \\braket{{\\color{RoyalBlue} 0,0,0,0},{\\color{SkyBlue} 1}} \\] [Color changes are for exposition only.] Internally, a placeholder option looks no different from an ordinary option. But we can now ensure that a homomorphic combination of all of the encryptions on a ballot will be one. An encrypted ballot can now be shown to be legitimate by proving that each value is an encryption of either zero and one and the homomorphic combination of all of the encryptions in each contest is an encryption of one. \\[ \\braket{{\\color{RoyalBlue} 0,0,0,0},{\\color{SkyBlue} 1}} \\longrightarrow {\\color{DarkBlue} 1} \\] Some might recognize this as a \"map-reduce\" operation (or for those familiar with Kenneth Iverson's APL, a simple reduction operation). The operator applied to encrypted values is simple multiplication. But the effect is to produce an encryption of the sum of the clear form values.","title":"Placeholders"},{"location":"concepts/Structure_and_Processes/#selection-limits","text":"There is one further generalization that must be accommodated. In some elections, there are contests where a voter is allowed to select more than one option. For example, there might be five options of which a voter is allowed to select up to three. To accommodate this possibility, we note the selection limit for each contest and generalize the use of placeholders. In most elections, all or most contests will have a selection limit of one, and one placeholder option will be added to each such contest. However, if the selection limit is higher, additional placeholder values are added \u2013 with the total number of placeholders matching the selection limit. For example, a \"choose up to three of five\" contest will be captured with eight encrypted values, the first five of which match the selections that can be made by a voter, and the last three of which are placeholder values that can be set if a voter does not make the maximum number of selections. The following offers some examples of how the clear form of a choose three of five ballot might be set. \\[\\begin{align} \\braket{{\\color{RoyalBlue} 1,0,0,1,1,}{\\color{SkyBlue}0,0,0}} \\longrightarrow {\\color{DarkBlue}3} \\\\ \\braket{{\\color{RoyalBlue} 0,1,1,0,1,}{\\color{SkyBlue}0,0,0}} \\longrightarrow {\\color{DarkBlue}3} \\\\ \\braket{{\\color{RoyalBlue} 1,0,0,1,0,}{\\color{SkyBlue} 0,0,1}}\\longrightarrow {\\color{DarkBlue}3} \\\\ \\braket{{\\color{RoyalBlue} 0,0,0,1,0,}{\\color{SkyBlue} 0,1,1}} \\longrightarrow {\\color{DarkBlue}3} \\\\ \\braket{{\\color{RoyalBlue}0,0,0,0,0,}{\\color{SkyBlue} 1,1,1}} \\longrightarrow {\\color{DarkBlue}3} \\\\ \\end{align}\\] [Color changes are for exposition only.] The first two instance represent ballots in which all three allowed votes have been used; the next instance shows a ballot in which only two options were selected; the following ballot instance contains one selection (and two placeholders set); and the final instance shows a case when a voter has made no selections and all three placeholders are used. In all of the above examples, an associated encrypted ballot is shown to be legitimate by showing that every value is an encryption of zero or one and the homomorphic combination of all of the encryptions produces an encryption of three.","title":"Selection Limits"},{"location":"concepts/Structure_and_Processes/#write-in-votes","text":"ElectionGuard currently does not distinguish between write-ins. If a write-in option is offered, ElectionGuard treats it as any other selection. ElectionGuard tallies the number of write-ins for any contest without indicating what was written in.","title":"Write-in Votes"},{"location":"concepts/Structure_and_Processes/#multiple-contests","text":"Most elections consist of more than a single contest. A single ballot can therefore include multiple contests. An encrypted ballot still consists entirely of encryptions of zeros and ones, but the interpretation of these encryptions and the accompanying proofs depend upon details provided in the ballot manifest. \\[ \\braket{{\\color{RoyalBlue} 0,1,0,}{\\color{SkyBlue} 0};{\\color{ForestGreen} 1,0,}{\\color{YellowGreen} 0};{\\color{RoyalBlue} 0,0,}{\\color{SkyBlue} 1};{\\color{ForestGreen} 1,0,1,0,0,}{\\color{YellowGreen} 0,0,1}} \\] [Color changes are for exposition only.] The above example shows a clear form of a ballot with four contests in which the second of three options is selected in the first contest (with the fourth position as an unused placeholder), the first of two options is chosen in the second contest (with the third position as an unused placeholder), neither of two options is selected in the third contest (with the placeholder set to one), and the first and third option selected in a \"three of five\" fourth contest with one of three placeholders set to one. The encrypted form of the example above should be accompanied by proofs that all eighteen of the components are encryptions of zero or one, that the first four encryptions homomorphically combine to form an encryption of one, the next three encryptions homomorphically combine to form an encryption of one, the following three encryptions homomorphically combine to form an encryption of one, and the final eight encryptions homomorphically combine to form an encryption of three.","title":"Multiple Contests"},{"location":"concepts/Structure_and_Processes/#post-election-decryption-of-tallies","text":"When an election is complete, there will be a set of encrypted ballots that have been cast by voters and will be published in the election record. The homomorphic property that is used within individual ballots to show that the number of selected options for each contest is correct can also be used across ballots to compute tallies. For example, suppose that the five clear form ballots shown above as samples in a choose-three-of-five contest represent actual ballots cast in an election. \\[\\begin{align} \\braket{{\\color{RoyalBlue} 1,0,0,1,1,}{\\color{SkyBlue} 0,0,0}} \\\\ \\braket{{\\color{RoyalBlue} 0,1,1,0,1,}{\\color{SkyBlue} 0,0,0}} \\\\ \\braket{{\\color{RoyalBlue} 1,0,0,1,0,}{\\color{SkyBlue} 0,0,1}} \\\\ \\braket{{\\color{RoyalBlue} 0,0,0,1,0,}{\\color{SkyBlue} 0,1,1}} \\\\ \\braket{{\\color{RoyalBlue} 0,0,0,0,0,}{\\color{SkyBlue} 1,1,1}} \\\\ \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\enspace \\downarrow \\\\ \\braket{{\\color{RoyalBlue} 2,1,1,3,2,}{\\color{SkyBlue} 1,2,3}} \\\\ \\end{align}\\]","title":"Post-Election Decryption of Tallies"},{"location":"concepts/Structure_and_Processes/#verifiable-decryption","text":"Guardians can each apply their private keys to an encrypted value to perform a partial decryption. graph TD A(\"Guardian T 1 (K 1 ,S 1 )\")-->B(M 1 ); C(\"Guardian T 2 (K 2 ,S 2 )\")-->D(M 2 ); A1(C)-->A; C1(C)-->C; E(\"Guardian T n (K n ,S n )\")-->F(M n ); E1(C)-->E; style B fill:#FFFFFF00,stroke:#FFFFFF00 style D fill:#FFFFFF00,stroke:#FFFFFF00 style C1 fill:#FFFFFF00,stroke:#FFFFFF00 style A1 fill:#FFFFFF00,stroke:#FFFFFF00 style E1 fill:#FFFFFF00,stroke:#FFFFFF00 style F fill:#FFFFFF00,stroke:#FFFFFF00 The partial decryptions \\(M_i\\) can be combined \u2013 again using ordinary multiplication \u2013 to form the full decryption. \\[ M = \\prod _{i=1} ^n M_i \\] Together with each partial decryption, each guardian produces additional data that can be used by observers to very that the decryptions are correct.","title":"Verifiable Decryption"},{"location":"concepts/Structure_and_Processes/#missing-guardians","text":"If one or more Guardians are missing during a decryption, a quorum of any \\(k\\) available Guardians can form the partial decryption of the missing Guardian. graph TD A(\"Guardian T i 1 S j,i 1 \")-->B(M j,i 1 ); C(\"Guardian T i 2 S j,i 2 \")-->D(M j,i 2 ); A1(C)-->A; C1(C)-->C; E(\"Guardian T i k S j,i k \")-->F(M j,i k ); E1(C)-->E; style B fill:#FFFFFF00,stroke:#FFFFFF00 style D fill:#FFFFFF00,stroke:#FFFFFF00 style C1 fill:#FFFFFF00,stroke:#FFFFFF00 style A1 fill:#FFFFFF00,stroke:#FFFFFF00 style E1 fill:#FFFFFF00,stroke:#FFFFFF00 style F fill:#FFFFFF00,stroke:#FFFFFF00 The \\(k\\) values \\(M_{j,i_{1}},M_{j,i_{2}}, ... ,M_{j,i_{k}},\\) can be combined to calculate the missing partial decryption. In this way, an aggregate ballot can be fully and verifiably decrypted by any quorum set of \\(k\\) Guardians.","title":"Missing Guardians"},{"location":"concepts/Structure_and_Processes/#casting-and-spoiling","text":"Voters need to be provided with a mechanism to encrypt their selections and have confidence that their selections have been correctly encrypted. The process used by ElectionGuard is to encrypt ballots as instructed by voters and then to allow voters to optionally spoil encrypted ballots. A spoiled ballot is verifiably decrypted (as with the aggregate ballot above), and the voter is given the opportunity to cast a new ballot. graph TD id[Make Selections]-->id1[Have Ballot Encrypted]; id1-->id2[Choose Cast or Spoil]; id2-->|Cast| id3[Record Encrypted Ballot as Cast]; id2-->|Spoil| id4[Decrypt Ballot and Record it as Spoiled]; id4-->id;","title":"Casting and Spoiling"},{"location":"concepts/Structure_and_Processes/#the-election-record","text":"Once voting is complete, an election record is published containing all of the following artifacts. All cast encrypted ballot Proofs that all cast encrypted ballots are properly formed A tally ballot formed as the homomorphic aggregation of all cast ballots A verifiable decryption of the tally ballot All spoiled ballots Verifiable decryptions of all spoiled ballots Cast Ballots: #tb1 td{ border-width:0.5px; border-style:solid; border-color:#3d414b; text-align: center; vertical-align: middle } #tb1 th{ border-width:0.5px;border-style:solid; text-align: center; border-color:#3d414b; vertical-align: middle; height:20px } .hd{text-align:center;vertical-align:top} .em{background-color:#0E84EE} .lm{background-color:#1fccff} #tb1 #rm .em{border-left:none;border-right:none;background-color:transparent} Contest1 Contest2 Contest3 Encrypted Ballot 1 Proof of Correct Form Encrypted Ballot 2 Proof of Correct Form Encrypted Ballot 3 Proof of Correct Form Encrypted Ballot 4 Proof of Correct Form Encrypted Ballot 5 Proof of Correct Form Encrypted Ballot 6 Proof of Correct Form x x x x x x x x x x x x Encrypted Tally Decrypted Tally 3 1 2 1 2 3 0 2 2 1 1 3 Proof of Correct Decryption Spoiled Ballot 1: table td{ border-width:0.5px; border-style:solid; border-color:#3d414b; text-align: center; vertical-align: middle } table th{ border-width:0.5px;border-style:solid; text-align: center; border-color:#3d414b; vertical-align: middle; height:20px } Contest1 Contest2 Contest3 Encrypted Ballot Decrypted Ballot 0 1 0 0 1 0 0 0 0 0 0 1 Proof of Correct Decryption Spoiled Ballot 2: Contest1 Contest2 Contest3 Encrypted Ballot Decrypted Ballot 1 0 0 0 0 0 1 1 1 0 0 0 Proof of Correct Decryption Spoiled Ballot 3: Contest1 Contest2 Contest3 Encrypted Ballot Decrypted Ballot 1 0 0 0 0 0 0 1 0 0 0 1 Proof of Correct Decryption Spoiled Ballot 4: Contest1 Contest2 Contest3 Encrypted Ballot Decrypted Ballot 0 0 1 0 0 1 0 0 0 1 0 0 Proof of Correct Decryption","title":"The Election Record"},{"location":"concepts/Structure_and_Processes/#verification","text":"Voters are able to verify that their own ballots have been correctly recorded by utilizing the ballot spoiling process described above. Anyone can verify that recorded ballots have been accurately tallied by verifying the following items. For each cast ballot, the proof that the ballot is properly formed The tally ballot is the homomorphic aggregation of all cast ballots The proof that the aggregate tally ballot has been correctly decrypted In addition, the election record contains spoiled ballots for which the following should be verified. The proof of the correct decryption of each spoiled ballot Each spoiled ballot is properly formed (this can be done by checking proofs of proper formation or simply by inspecting the decryption) Although logically, the verification of correct decryption of spoiled ballots can be done by the individual voters who spoiled those ballots as part of the verification of correct recording; practically, this process closely matches the process of verifying correct decryption of the aggregate tally ballot. By transferring this responsibility to those verifying the election record, voters who want to verify correct recording of their ballots can be relieved of the responsibility of writing/executing code to check the decryption arithmetic and can instead check merely whether the claimed decryptions of spoiled ballots match their expectations.","title":"Verification"},{"location":"concepts/Verifiability/","text":"Creating a Verifiable Election ElectionGuard is a software development kit (SDK) election system vendors can use to implement end-to-end verifiable (E2E-V) elections. Because it is designed to be integrated into both existing and new systems, it needs to be flexible. However, for end-to-end verifiability to be achieved, the following 3 core capabilities must be delivered: The voter is given a verification code they can use to verify their ballot was included in the final tally The voter has the means to challenge a ballot The election results and all its encrypted artifacts, including zero knowledge proofs, are published to enable full independent verifiability by third parties We describe each of these capabilities in detail below. Voter Verification Code A voter verification code is generated by the ballot encryption process of ElectionGuard. It is generated when the user has submitted their ballot to the voting system. Generating the Verification Code Submitting a ballot can mean virtually pressing a \"Submit\" button on a touchscreen voting device, inserting a paper ballot into a digital scanner, or some other event that causes a cast vote record to be generated in the voting system. From a user experience standpoint, the ballot encryption occurs at a point after the voter has filled out all contests they plan to, and has had a chance to review all their choices in a summary screen (or the completed paper ballot). In the ballot marking device use case, the ballot would be encrypted after the voter presses submit. For a ballot scanner, the cast vote record is generated after the scanner has interpreted the ballot. Please note that while the diagrams above show devices such as 'encrypted ballot server', ElectionGuard is intended to be run in an offline environment ; as such, if an API or server is used to listen for or communicate encryption requests, they are expected to be run locally in a secure environment. Once the ballot has been encrypted, the encrypting device needs to handle the verification code returned by the ballot encryption process and present it to the voter, ideally by printing it at the moment of creation in a format easy for the voter to take with them. When the election results are published (see \"Publishing election results\" below), these verification codes are published alongside, enabling them to see that their ballots were included in the election tally (or, in the case of Challenge Ballots, that they were included as challenge ballots (see \"Challenging a Ballot\" below)) The verification code format is a mix of human-readable words and alphanumeric codes. The first word is always human-readable to facilitate a search-like discovery experience (to try, go to our demo tracking site and begin typing 'coo' to surface the verification code above, or simply click the image to be taken directly). Challenging a ballot Encrypting a ballot and generating a verification code is the first step in an E2E-V process for the voter. For E2E-V compliance, the voter has to be offered the ability to challenge or \"spoil\" the ballot after the verification code has been generated and provided to the voter. When a ballot is challenged, it is no longer eligible to be included in the final tally. If the voter wants to register a vote after a challenge, they will need to begin the process again with a new ballot. In addition, when a ballot is challenged, the system must be able to perform a decryption of the challenged ballot and reveal its contents to the voter. Challenging of ballots increases the inherent security of the system, since the system has to assume that any ballot encrypted might have to be revealed, exposing any manipulation that may have occurred after submission; the system can't assume its actions will remain hidden. Individual voters can obtain as much confidence as they desire by challenging as many ballots as they wish. Although they won't ever be shown that the encryption of a cast ballot matches their selections, voters can see that every challenged ballot was correctly encrypted and committed to before the decision to cast or challenge was made. The ability to observe that all challenge ballots are correct thereby provides indirect evidence that cast ballots were also correct. Publishing Verifiable results When the election is complete and the results tallied, E2E-V elections publish the results so they can be verified independently. E2E-V election verifiers are written by third parties according to their interpretation of the ElectionGuard Specification . Any data published by an election should enable each and every cast encrypted ballot to be interrogated and tallied independently. From the spec: An ElectionGuard ballot is comprised entirely of encryptions of one (indicating selection made) and zero (indicating selection not made). Two things must be proven about the encryption of each vote: The encryption associated with each option is either an encryption of zero or an encryption of one. The sum of all encrypted values in a contest is equal to the selection limit for that contest (usually one). ElGamal encryption enables efficient zero-knowledge proofs of these requirements, and the Fiat-Shamir heuristic can be used to make these proofs non-interactive. Chaum-Pedersen proofs are used to demonstrate that an encryption is that of a specified value, and these are combined with the Cramer-Damg\u00e5rd-Schoenmakers technique to show that an encryption is that of one of a specified set of values \u2013 particularly that a value is an encryption of either zero or one. The set of encryptions of selections in a contest are homomorphically combined, and the result is shown to be an encryption of that contest\u2019s selection limit, again using a Chaum-Pedersen proof. Once every ballot is proven to be properly formed (as above), all of the votes for each option are homomorphically summed to produce encryptions of the tallies for each option. The final step is then to decrypt these tallies and provide additional proofs that the decryption are correct. Showing Verification Code Results to Voters In addition to satisfying the data requirements for proper verification, any publishing exercise needs to also enable individual voters to query for the ballot that matches their verification code. Verification code results of cast ballots will indicate that the ballot was included in the final tally, and any associated metadata about the device that recorded the ballot (time, location, election, etc.; see example above). Challenge ballots are also published. Results for verification codes of challenge ballots should indicate that the ballot was not included in the election tally. Because the ballot is not included in the election tally, the contents can be decrypted and presented as well.","title":"Creating a Verifiable Election"},{"location":"concepts/Verifiability/#creating-a-verifiable-election","text":"ElectionGuard is a software development kit (SDK) election system vendors can use to implement end-to-end verifiable (E2E-V) elections. Because it is designed to be integrated into both existing and new systems, it needs to be flexible. However, for end-to-end verifiability to be achieved, the following 3 core capabilities must be delivered: The voter is given a verification code they can use to verify their ballot was included in the final tally The voter has the means to challenge a ballot The election results and all its encrypted artifacts, including zero knowledge proofs, are published to enable full independent verifiability by third parties We describe each of these capabilities in detail below.","title":"Creating a Verifiable Election"},{"location":"concepts/Verifiability/#voter-verification-code","text":"A voter verification code is generated by the ballot encryption process of ElectionGuard. It is generated when the user has submitted their ballot to the voting system.","title":"Voter Verification Code"},{"location":"concepts/Verifiability/#generating-the-verification-code","text":"Submitting a ballot can mean virtually pressing a \"Submit\" button on a touchscreen voting device, inserting a paper ballot into a digital scanner, or some other event that causes a cast vote record to be generated in the voting system. From a user experience standpoint, the ballot encryption occurs at a point after the voter has filled out all contests they plan to, and has had a chance to review all their choices in a summary screen (or the completed paper ballot). In the ballot marking device use case, the ballot would be encrypted after the voter presses submit. For a ballot scanner, the cast vote record is generated after the scanner has interpreted the ballot. Please note that while the diagrams above show devices such as 'encrypted ballot server', ElectionGuard is intended to be run in an offline environment ; as such, if an API or server is used to listen for or communicate encryption requests, they are expected to be run locally in a secure environment. Once the ballot has been encrypted, the encrypting device needs to handle the verification code returned by the ballot encryption process and present it to the voter, ideally by printing it at the moment of creation in a format easy for the voter to take with them. When the election results are published (see \"Publishing election results\" below), these verification codes are published alongside, enabling them to see that their ballots were included in the election tally (or, in the case of Challenge Ballots, that they were included as challenge ballots (see \"Challenging a Ballot\" below)) The verification code format is a mix of human-readable words and alphanumeric codes. The first word is always human-readable to facilitate a search-like discovery experience (to try, go to our demo tracking site and begin typing 'coo' to surface the verification code above, or simply click the image to be taken directly).","title":"Generating the Verification Code"},{"location":"concepts/Verifiability/#challenging-a-ballot","text":"Encrypting a ballot and generating a verification code is the first step in an E2E-V process for the voter. For E2E-V compliance, the voter has to be offered the ability to challenge or \"spoil\" the ballot after the verification code has been generated and provided to the voter. When a ballot is challenged, it is no longer eligible to be included in the final tally. If the voter wants to register a vote after a challenge, they will need to begin the process again with a new ballot. In addition, when a ballot is challenged, the system must be able to perform a decryption of the challenged ballot and reveal its contents to the voter. Challenging of ballots increases the inherent security of the system, since the system has to assume that any ballot encrypted might have to be revealed, exposing any manipulation that may have occurred after submission; the system can't assume its actions will remain hidden. Individual voters can obtain as much confidence as they desire by challenging as many ballots as they wish. Although they won't ever be shown that the encryption of a cast ballot matches their selections, voters can see that every challenged ballot was correctly encrypted and committed to before the decision to cast or challenge was made. The ability to observe that all challenge ballots are correct thereby provides indirect evidence that cast ballots were also correct.","title":"Challenging a ballot"},{"location":"concepts/Verifiability/#publishing-verifiable-results","text":"When the election is complete and the results tallied, E2E-V elections publish the results so they can be verified independently. E2E-V election verifiers are written by third parties according to their interpretation of the ElectionGuard Specification . Any data published by an election should enable each and every cast encrypted ballot to be interrogated and tallied independently. From the spec: An ElectionGuard ballot is comprised entirely of encryptions of one (indicating selection made) and zero (indicating selection not made). Two things must be proven about the encryption of each vote: The encryption associated with each option is either an encryption of zero or an encryption of one. The sum of all encrypted values in a contest is equal to the selection limit for that contest (usually one). ElGamal encryption enables efficient zero-knowledge proofs of these requirements, and the Fiat-Shamir heuristic can be used to make these proofs non-interactive. Chaum-Pedersen proofs are used to demonstrate that an encryption is that of a specified value, and these are combined with the Cramer-Damg\u00e5rd-Schoenmakers technique to show that an encryption is that of one of a specified set of values \u2013 particularly that a value is an encryption of either zero or one. The set of encryptions of selections in a contest are homomorphically combined, and the result is shown to be an encryption of that contest\u2019s selection limit, again using a Chaum-Pedersen proof. Once every ballot is proven to be properly formed (as above), all of the votes for each option are homomorphically summed to produce encryptions of the tallies for each option. The final step is then to decrypt these tallies and provide additional proofs that the decryption are correct.","title":"Publishing Verifiable results"},{"location":"concepts/Verifiability/#showing-verification-code-results-to-voters","text":"In addition to satisfying the data requirements for proper verification, any publishing exercise needs to also enable individual voters to query for the ballot that matches their verification code. Verification code results of cast ballots will indicate that the ballot was included in the final tally, and any associated metadata about the device that recorded the ballot (time, location, election, etc.; see example above). Challenge ballots are also published. Results for verification codes of challenge ballots should indicate that the ballot was not included in the election tally. Because the ballot is not included in the election tally, the contents can be decrypted and presented as well.","title":"Showing Verification Code Results to Voters"},{"location":"contribute/","text":"Contribute Whenever possible and as a guiding principle, the evolution of the ElectionGuard SDK will be driven by the use cases and priorities of the community and in service of best-practice implementations of real-world, secret-ballot public elections. Community contributions are highly valued. Help defend democracy and contribute to ElectionGuard. Where to Start? There are many locations to contribute to ElectionGuard. ElectionGuard is an open source platform and depends on an active community and ecosystem. The SDK is comprised of two repositories: ElectionGuard Specification ElectionGuard C++ Ways to get involved Learn about ElectionGuard and share the information Post questions or ideas in our discussion board Develop on issues in the repos with tags of good first issue or help wanted Add to and improve documentation. Keep it Plain English and include helpful images . Contributions ElectionGuard relies on its community for its success. For example, for end-to-end verifiable elections, integrity is improved by the number of independent verifiers that confirm the results of an election. Verifiers Go Verifier by Andreas Nielsen, Niklas Bille, and Hans-Christian Kjeldsen Julia Verifier by MITRE Python Verifier by Rainbow Huang C# Verifier by Brandon Alexander Java Verifier by John Caron Python Verifier (electionguard-verify) by Nicholas Boucher Library Ports Java port of Python Library by John Caron","title":"Contribute"},{"location":"contribute/#contribute","text":"Whenever possible and as a guiding principle, the evolution of the ElectionGuard SDK will be driven by the use cases and priorities of the community and in service of best-practice implementations of real-world, secret-ballot public elections. Community contributions are highly valued. Help defend democracy and contribute to ElectionGuard.","title":"Contribute"},{"location":"contribute/#where-to-start","text":"There are many locations to contribute to ElectionGuard. ElectionGuard is an open source platform and depends on an active community and ecosystem. The SDK is comprised of two repositories: ElectionGuard Specification ElectionGuard C++","title":"Where to Start?"},{"location":"contribute/#ways-to-get-involved","text":"Learn about ElectionGuard and share the information Post questions or ideas in our discussion board Develop on issues in the repos with tags of good first issue or help wanted Add to and improve documentation. Keep it Plain English and include helpful images .","title":"Ways to get involved"},{"location":"contribute/#contributions","text":"ElectionGuard relies on its community for its success. For example, for end-to-end verifiable elections, integrity is improved by the number of independent verifiers that confirm the results of an election.","title":"Contributions"},{"location":"contribute/#verifiers","text":"Go Verifier by Andreas Nielsen, Niklas Bille, and Hans-Christian Kjeldsen Julia Verifier by MITRE Python Verifier by Rainbow Huang C# Verifier by Brandon Alexander Java Verifier by John Caron Python Verifier (electionguard-verify) by Nicholas Boucher","title":"Verifiers"},{"location":"contribute/#library-ports","text":"Java port of Python Library by John Caron","title":"Library Ports"},{"location":"develop/Applications/","text":"Applications There are many different paths for creating applications that work using ElectionGuard. For many of these paths, there are reference implementations that can be forked or used as examples or used as packages. Many reference implementations include packaging or containerization for easy consumption. Below are some examples of paths a developer could take when developing using ElectionGuard. This list is by no means complete and some of these paths can be combined for different applications and use cases. If you develop an app for ElectionGuard, we suggest you utilize our badges to indicate which version of the specification your application targets. Paths ElectionGuard Core An ElectionGuard Core is an application that implements the base level features such as Ballot Encryption by implementing them according to the specification. The internal examples of this are the Python and C++ reference implementations. There is a community example of this with the Java port done by the community. Ballot Marking Ballot marking is the process of recording a voter's selections on a ballot. A ballot marking app displays the contests from the manifest according to an individuals voter's ballot style and language. The voter then votes and the selections are recorded on a plaintext ballot . Ballot Encryption Ballot encryption is the process of converting voter selections into data such that it cannot be read by unauthorized parties. A ballot encryption app provides this fundamental functionality. The app functions as a tool that encrypts a plaintext ballot into a encrypted ballot aka ciphertext ballot . Two quick ways to start are by using the ElectionGuard encryption nuget package or or python package . Ballot Box A ballot box app takes the encrypted ballot of a voter and allows a user to submit the ballot as cast or spoil the ballot. A submitted cast ballot is aggregated into the tally. A submitted spoiled ballot is added to the list of spoiled ballots. Administer Election Administering an election for ElectionGuard usually requires the following steps. An example of this is available in electionguard-ui repository . Setup Election - An election should be setup with a manifest and selected guardians Key Ceremony - A key ceremony should be run that results in the encryption key that can be used for the ballots. Tally Ceremony - A tally ceremony when run will decrypt the tally and any spoiled ballots Election Record - An election record should be retrievable at the end of the election for publication and verification purposes. A quick way to start is to use the electionguard api-client and the electionguard-python-api . Publish Election The results of election can be displayed after an election is closed. An example of this is available in electionguard-ui repository . This application should contain three pieces. Results - Using decrypted tally and manifest, the tallied results should be displayed. Ballot Confirmation - Confirm a ballot is in the Election Record. Confirm Cast - Confirm a ballot was cast and included in tally Challenge Ballot - Confirm a ballot was spoiled and display decrypted spoiled ballot to user Download Election Record - The Election Record should be downloadable for the public. Verify Election A verifier app verifies an election is true and accurate by using the publicly published information about a completed election. At the close of an election using ElectionGuard, an election record should be created and made public. ElectionGuard encourages third parties to create their own verifiers and help verify election records. A basic example of a verifier can be found within the electionguard-python repository , but verifiers should aim to be as thorough as possible. After consuming the files in an election record, verifiers can validate everything from the key ceremony to the decryption since the election is end to end verifiable.","title":"Applications"},{"location":"develop/Applications/#applications","text":"There are many different paths for creating applications that work using ElectionGuard. For many of these paths, there are reference implementations that can be forked or used as examples or used as packages. Many reference implementations include packaging or containerization for easy consumption. Below are some examples of paths a developer could take when developing using ElectionGuard. This list is by no means complete and some of these paths can be combined for different applications and use cases. If you develop an app for ElectionGuard, we suggest you utilize our badges to indicate which version of the specification your application targets.","title":"Applications"},{"location":"develop/Applications/#paths","text":"","title":"Paths"},{"location":"develop/Applications/#electionguard-core","text":"An ElectionGuard Core is an application that implements the base level features such as Ballot Encryption by implementing them according to the specification. The internal examples of this are the Python and C++ reference implementations. There is a community example of this with the Java port done by the community.","title":"ElectionGuard Core"},{"location":"develop/Applications/#ballot-marking","text":"Ballot marking is the process of recording a voter's selections on a ballot. A ballot marking app displays the contests from the manifest according to an individuals voter's ballot style and language. The voter then votes and the selections are recorded on a plaintext ballot .","title":"Ballot Marking"},{"location":"develop/Applications/#ballot-encryption","text":"Ballot encryption is the process of converting voter selections into data such that it cannot be read by unauthorized parties. A ballot encryption app provides this fundamental functionality. The app functions as a tool that encrypts a plaintext ballot into a encrypted ballot aka ciphertext ballot . Two quick ways to start are by using the ElectionGuard encryption nuget package or or python package .","title":"Ballot Encryption"},{"location":"develop/Applications/#ballot-box","text":"A ballot box app takes the encrypted ballot of a voter and allows a user to submit the ballot as cast or spoil the ballot. A submitted cast ballot is aggregated into the tally. A submitted spoiled ballot is added to the list of spoiled ballots.","title":"Ballot Box"},{"location":"develop/Applications/#administer-election","text":"Administering an election for ElectionGuard usually requires the following steps. An example of this is available in electionguard-ui repository . Setup Election - An election should be setup with a manifest and selected guardians Key Ceremony - A key ceremony should be run that results in the encryption key that can be used for the ballots. Tally Ceremony - A tally ceremony when run will decrypt the tally and any spoiled ballots Election Record - An election record should be retrievable at the end of the election for publication and verification purposes. A quick way to start is to use the electionguard api-client and the electionguard-python-api .","title":"Administer Election"},{"location":"develop/Applications/#publish-election","text":"The results of election can be displayed after an election is closed. An example of this is available in electionguard-ui repository . This application should contain three pieces. Results - Using decrypted tally and manifest, the tallied results should be displayed. Ballot Confirmation - Confirm a ballot is in the Election Record. Confirm Cast - Confirm a ballot was cast and included in tally Challenge Ballot - Confirm a ballot was spoiled and display decrypted spoiled ballot to user Download Election Record - The Election Record should be downloadable for the public.","title":"Publish Election"},{"location":"develop/Applications/#verify-election","text":"A verifier app verifies an election is true and accurate by using the publicly published information about a completed election. At the close of an election using ElectionGuard, an election record should be created and made public. ElectionGuard encourages third parties to create their own verifiers and help verify election records. A basic example of a verifier can be found within the electionguard-python repository , but verifiers should aim to be as thorough as possible. After consuming the files in an election record, verifiers can validate everything from the key ceremony to the decryption since the election is end to end verifiable.","title":"Verify Election"},{"location":"develop/Badges/","text":"Badges For your convenience, these are some badges to add to your repository indicating the version of ElectionGuard your code supports. See versioning . [![ElectionGuard 0.85](https://img.shields.io/badge/\ud83d\uddf3%20ElectionGuard-v0.85-red)](https://www.electionguard.vote/spec) [![ElectionGuard 0.95](https://img.shields.io/badge/\ud83d\uddf3%20ElectionGuard-v0.95-yellow)](https://www.electionguard.vote/spec) [![ElectionGuard 1.0](https://img.shields.io/badge/\ud83d\uddf3%20ElectionGuard-v1.0-green)](https://www.electionguard.vote/spec) [![ElectionGuard 1.1](https://img.shields.io/badge/\ud83d\uddf3%20ElectionGuard-v1.1-green)](https://www.electionguard.vote/spec) [![ElectionGuard 2.0](https://img.shields.io/badge/\ud83d\uddf3%20ElectionGuard-v2.0-yellow)](https://www.electionguard.vote/spec)","title":"Badges"},{"location":"develop/Badges/#badges","text":"For your convenience, these are some badges to add to your repository indicating the version of ElectionGuard your code supports. See versioning . [![ElectionGuard 0.85](https://img.shields.io/badge/\ud83d\uddf3%20ElectionGuard-v0.85-red)](https://www.electionguard.vote/spec) [![ElectionGuard 0.95](https://img.shields.io/badge/\ud83d\uddf3%20ElectionGuard-v0.95-yellow)](https://www.electionguard.vote/spec) [![ElectionGuard 1.0](https://img.shields.io/badge/\ud83d\uddf3%20ElectionGuard-v1.0-green)](https://www.electionguard.vote/spec) [![ElectionGuard 1.1](https://img.shields.io/badge/\ud83d\uddf3%20ElectionGuard-v1.1-green)](https://www.electionguard.vote/spec) [![ElectionGuard 2.0](https://img.shields.io/badge/\ud83d\uddf3%20ElectionGuard-v2.0-yellow)](https://www.electionguard.vote/spec)","title":"Badges"},{"location":"develop/Data_Schema/","text":"Data Schema ElectionGuard expects data to be formatted in a particular way according to a set of JSON schemas . The expectation is to keep these schemas alongside the specification. The schemas will be defined here to indicate to developers what they should be expecting. Keep in mind that not all serialized files should be public. The election record includes the list of all data formats that should be public. Sample data for the election is also available for developers. This will include both what is in the Election Record, but also some private data only available for testing. Schema ![Version 1.91][shield-green-1.91] Currently, JSON is used as the primary serialization format of the artifacts from an election. These are JSON schema files that can be used to verify the schema of the setup files like the manifest pre-election and the election record files post-election. This represents the full list of items that can be serialized / deserialized, but not all elections will use every file type. Work in Progress This is a work in progress. Feel free to contribute. Election Manifest / Manifest - Election manifest Context / CiphertextElectionContext - Context for encryption for specific election Constants / ElectionConstants - Constants of election Encryption Device / EncryptionDevice - Encryption device information Ceremony Guardian / GuardianRecord - Single guardian's record Lagrange Coefficients / LagrangeCoefficientsRecord - Lagrange coefficients Ballot Ballot / PlaintextBallot - Plaintext ballot [Compact Ballot][compact_ballot] / CompactBallot - Compact ballot Encrypted Ballot / CiphertextBallot - Encrypted ballot Spoiled Ballot / SpoiledBallot - Submitted spoiled ballot Tally Tally / PlaintextTally - Plaintext tally Encrypted Tally / PublishedCiphertextTally - Encrypted tally","title":"Data Schema"},{"location":"develop/Data_Schema/#data-schema","text":"ElectionGuard expects data to be formatted in a particular way according to a set of JSON schemas . The expectation is to keep these schemas alongside the specification. The schemas will be defined here to indicate to developers what they should be expecting. Keep in mind that not all serialized files should be public. The election record includes the list of all data formats that should be public. Sample data for the election is also available for developers. This will include both what is in the Election Record, but also some private data only available for testing.","title":"Data Schema"},{"location":"develop/Data_Schema/#schema-version-191shield-green-191","text":"Currently, JSON is used as the primary serialization format of the artifacts from an election. These are JSON schema files that can be used to verify the schema of the setup files like the manifest pre-election and the election record files post-election. This represents the full list of items that can be serialized / deserialized, but not all elections will use every file type. Work in Progress This is a work in progress. Feel free to contribute.","title":"Schema ![Version 1.91][shield-green-1.91]"},{"location":"develop/Data_Schema/#election","text":"Manifest / Manifest - Election manifest Context / CiphertextElectionContext - Context for encryption for specific election Constants / ElectionConstants - Constants of election Encryption Device / EncryptionDevice - Encryption device information","title":"Election"},{"location":"develop/Data_Schema/#ceremony","text":"Guardian / GuardianRecord - Single guardian's record Lagrange Coefficients / LagrangeCoefficientsRecord - Lagrange coefficients","title":"Ceremony"},{"location":"develop/Data_Schema/#ballot","text":"Ballot / PlaintextBallot - Plaintext ballot [Compact Ballot][compact_ballot] / CompactBallot - Compact ballot Encrypted Ballot / CiphertextBallot - Encrypted ballot Spoiled Ballot / SpoiledBallot - Submitted spoiled ballot","title":"Ballot"},{"location":"develop/Data_Schema/#tally","text":"Tally / PlaintextTally - Plaintext tally Encrypted Tally / PublishedCiphertextTally - Encrypted tally","title":"Tally"},{"location":"develop/Election_Record/","text":"Election Record The Election Record is the group of files required at the end of the election to verify the election and is intended to be posted publicly. It should not contain any sensitive data (eg: no guardian private keys) in the record. These include the following: Encryption Devices Information Guardian Records Decrypted Spoiled Ballots Encrypted Submitted Ballots Lagrange Coefficients Record Election Constants Election Context Encrypted Tally Manifest Decrypted Tally Folder Structure The Election Record should be expected to be a zip folder containing the following information. \ud83d\udcc2 record --- \ud83d\udcc1 encryption_devices ------- \ud83d\udcc4 device_id_1.json ------- \ud83d\udcc4 device_id_2.json ------- ... --- \ud83d\udcc1 guardians ------- \ud83d\udcc4 guardian_id_1.json ------- \ud83d\udcc4 guardian_id_2.json ------- ... --- \ud83d\udcc1 spoiled_ballots ------- \ud83d\udcc4 spoiled_ballot_id_3.json ------- \ud83d\udcc4 spoiled_ballot_id_4.json ------- ... --- \ud83d\udcc1 submitted_ballots ------- \ud83d\udcc4 submitted_ballot_id_1.json ------- \ud83d\udcc4 submitted_ballot_id_2.json ------- ... --- \ud83d\udcc4 coefficients.json --- \ud83d\udcc4 constants.json --- \ud83d\udcc4 context.json --- \ud83d\udcc4 encrypted_tally.json --- \ud83d\udcc4 manifest.json --- \ud83d\udcc4 tally.json","title":"Election Record"},{"location":"develop/Election_Record/#election-record","text":"The Election Record is the group of files required at the end of the election to verify the election and is intended to be posted publicly. It should not contain any sensitive data (eg: no guardian private keys) in the record. These include the following: Encryption Devices Information Guardian Records Decrypted Spoiled Ballots Encrypted Submitted Ballots Lagrange Coefficients Record Election Constants Election Context Encrypted Tally Manifest Decrypted Tally","title":"Election Record"},{"location":"develop/Election_Record/#folder-structure","text":"The Election Record should be expected to be a zip folder containing the following information. \ud83d\udcc2 record --- \ud83d\udcc1 encryption_devices ------- \ud83d\udcc4 device_id_1.json ------- \ud83d\udcc4 device_id_2.json ------- ... --- \ud83d\udcc1 guardians ------- \ud83d\udcc4 guardian_id_1.json ------- \ud83d\udcc4 guardian_id_2.json ------- ... --- \ud83d\udcc1 spoiled_ballots ------- \ud83d\udcc4 spoiled_ballot_id_3.json ------- \ud83d\udcc4 spoiled_ballot_id_4.json ------- ... --- \ud83d\udcc1 submitted_ballots ------- \ud83d\udcc4 submitted_ballot_id_1.json ------- \ud83d\udcc4 submitted_ballot_id_2.json ------- ... --- \ud83d\udcc4 coefficients.json --- \ud83d\udcc4 constants.json --- \ud83d\udcc4 context.json --- \ud83d\udcc4 encrypted_tally.json --- \ud83d\udcc4 manifest.json --- \ud83d\udcc4 tally.json","title":"Folder Structure"},{"location":"develop/Getting_Started/","text":"Getting Started ElectionGuard as an SDK provides a specification and reference implementations with specific data format. If you're looking to develop code with ElectionGuard, you might be wondering where to start. There are two paths: Create an app using ElectionGuard Contribute to ElectionGuard's open source Tip If you're having trouble understanding where to start, the architecture pages dive in a bit deeper. Take a look at versioning to get a good idea of what is still in progress. Create an App There are many different possible applications that can be created using ElectionGuard reference implementations or for ElectionGuard. A helpful starting list can be found within applications . Feel free to use badges to indicate which version of the specification the app was developed for. Contribute to Open Source ElectionGuard is an open source platform and depends on an active community and ecosystem. The contribute page highlights some top level ways to contribute. For those that want to jump right in, take a look at our approach and our repositories . Note Each repository houses the in-depth developer documentation for coding with the repositories.","title":"Getting Started"},{"location":"develop/Getting_Started/#getting-started","text":"ElectionGuard as an SDK provides a specification and reference implementations with specific data format. If you're looking to develop code with ElectionGuard, you might be wondering where to start. There are two paths: Create an app using ElectionGuard Contribute to ElectionGuard's open source Tip If you're having trouble understanding where to start, the architecture pages dive in a bit deeper. Take a look at versioning to get a good idea of what is still in progress.","title":"Getting Started"},{"location":"develop/Getting_Started/#create-an-app","text":"There are many different possible applications that can be created using ElectionGuard reference implementations or for ElectionGuard. A helpful starting list can be found within applications . Feel free to use badges to indicate which version of the specification the app was developed for.","title":"Create an App"},{"location":"develop/Getting_Started/#contribute-to-open-source","text":"ElectionGuard is an open source platform and depends on an active community and ecosystem. The contribute page highlights some top level ways to contribute. For those that want to jump right in, take a look at our approach and our repositories . Note Each repository houses the in-depth developer documentation for coding with the repositories.","title":"Contribute to Open Source"},{"location":"develop/Repositories/","text":"Repositories There are 5 repositories within the ElectionGuard SDK : ElectionGuard Specification ElectionGuard Python ElectionGuard C++ ElectionGuard Python API ElectionGuard React UI If you're looking to develop for ElectionGuard, it might help if you pick something you're familiar with. The following list acts to showcase the language to assist you in finding the right place. Each repository contains information on the best way to contribute and how to setup the development environment. Take a look and see what appeals to you. ElectionGuard Specification The ElectionGuard Specification repository addresses the mathematical and conceptual underpinnings of end-to-end verifiability in a manner that comfortably accommodates post-election audits. The specification houses the core data constructs, tests, and datasets that we recommend to ensure portability and data integrity. The ElectionGuard site is also built from this repository using mkdocs. This can be a friendly place to start out for new developers trying to get started. Specification | Source ElectionGuard Python The ElectionGuard Python library is a reference implementation of the ElectionGuard SDK . It covers the entire suite of functionality and processes necessary to implement an end-to-end verifiable election as part a voting system: Key generation ceremony Ballot encryption Tally ceremony Ballot decryption It is designed to be portable over performant , universal over Pythonic (although we do try to adhere to the Zen of Python ). Any real-world voting use case will need to incorporate the capabilities of the Python library to run an end-to-end verifiable election or post-election audit . Source | Package | Documentation Community-sourced Java port Check out our community contributions for a Java port . ElectionGuard C++ The ElectionGuard C++ library performs ballot encryption. It is designed for devices that handle the user experience of voting. These devices follow the economics and performance of embedded systems: special-purpose devices designed for low cost. We assume Intel Atom class processor-level performance and Raspberry Pi 3 types of operating systems. In addition to the C++ library itself, there is some focus on target different standalone packages. This leads to the usage of other languages like C and C#. Source ElectionGuard Python API This API uses the electionguard-python package in a Python API utilizing FastAPI. This exposes the full featured Python ElectionGuard and allows users to create docker containers of the API. Source ElectionGuard UI This UI application features several TypeScript packages as a monorepo, a version-controlled code repository that holds many projects, to reduce repeated tooling. It contains two web applications. One is an application to administer an election. The other is an application to display the election results. There are two helper packages, one functions as an api client and the other is a component library. Source","title":"Repositories"},{"location":"develop/Repositories/#repositories","text":"There are 5 repositories within the ElectionGuard SDK : ElectionGuard Specification ElectionGuard Python ElectionGuard C++ ElectionGuard Python API ElectionGuard React UI If you're looking to develop for ElectionGuard, it might help if you pick something you're familiar with. The following list acts to showcase the language to assist you in finding the right place. Each repository contains information on the best way to contribute and how to setup the development environment. Take a look and see what appeals to you.","title":"Repositories"},{"location":"develop/Repositories/#electionguard-specification","text":"The ElectionGuard Specification repository addresses the mathematical and conceptual underpinnings of end-to-end verifiability in a manner that comfortably accommodates post-election audits. The specification houses the core data constructs, tests, and datasets that we recommend to ensure portability and data integrity. The ElectionGuard site is also built from this repository using mkdocs. This can be a friendly place to start out for new developers trying to get started. Specification | Source","title":"ElectionGuard Specification  "},{"location":"develop/Repositories/#electionguard-python","text":"The ElectionGuard Python library is a reference implementation of the ElectionGuard SDK . It covers the entire suite of functionality and processes necessary to implement an end-to-end verifiable election as part a voting system: Key generation ceremony Ballot encryption Tally ceremony Ballot decryption It is designed to be portable over performant , universal over Pythonic (although we do try to adhere to the Zen of Python ). Any real-world voting use case will need to incorporate the capabilities of the Python library to run an end-to-end verifiable election or post-election audit . Source | Package | Documentation Community-sourced Java port Check out our community contributions for a Java port .","title":"ElectionGuard Python  "},{"location":"develop/Repositories/#electionguard-c","text":"The ElectionGuard C++ library performs ballot encryption. It is designed for devices that handle the user experience of voting. These devices follow the economics and performance of embedded systems: special-purpose devices designed for low cost. We assume Intel Atom class processor-level performance and Raspberry Pi 3 types of operating systems. In addition to the C++ library itself, there is some focus on target different standalone packages. This leads to the usage of other languages like C and C#. Source","title":"ElectionGuard C++  "},{"location":"develop/Repositories/#electionguard-python-api","text":"This API uses the electionguard-python package in a Python API utilizing FastAPI. This exposes the full featured Python ElectionGuard and allows users to create docker containers of the API. Source","title":"ElectionGuard Python API  "},{"location":"develop/Repositories/#electionguard-ui","text":"This UI application features several TypeScript packages as a monorepo, a version-controlled code repository that holds many projects, to reduce repeated tooling. It contains two web applications. One is an application to administer an election. The other is an application to display the election results. There are two helper packages, one functions as an api client and the other is a component library. Source","title":"ElectionGuard UI  "},{"location":"develop/Sample_Data/","text":"Sample Data To better understand the data formats used by ElectionGuard, sample data is provided here to guide new developers. Four Sample Elections We have provided sample data for four different elections: Minimal - This is the most minimal election manifest file possible, designed to be easy to inspect and quick to develop against for rapid testing. All optional fields have been removed from the election manifest file. The election contains a single Yes/No referendum with a single ballot style in a single geopolitical unit. Small - This is designed to be a relatively small and simple election, but with more complexity than the minimal election. This is a good sample data set to begin understanding more complex ballot types with two or more geopolitical units or ballot styles. Three contests are listed (one of each type: Yes/No Referendum, Select One, and Select n of m), two GP units, two ballot styles, and a small number of recommended optional fields are included. Full - This is a more realistic example for a primary election for a municipality. This ballot contains several geopolitical units with multiple ballot styles and contains all optional metadata fields. This sample has multi-language support and multiple submitted ballot samples. Hamilton General - This is a complete example for a general election for a fictional municipality. This example contains many geopolitical units with multiple ballot styles and demonstrates how political districts overlap. This sample has multi-language support and multiple submitted ballot samples. The Hamilton General example also includes the election private data that includes guardian private keys. More information about the Hamilton General Example can be found in the Election Manifest Documentation . Data Election Manifests The Election Manifest contains all the details of the election (such as contests, candidates, selections, ballot styles, etc.) and is required at the start of an ElectionGuard election. Manifest Examples: [minimal][minimal-election-manifest] | [small][small-election-manifest] | [full][full-election-manifest] | hamilton Submitted Ballots Submitted Ballots are encrypted ballots that have been cast or spoiled . Cast ballots will be tallied and spoiled ballots are decrypted. Submitted Ballot Examples: [minimal][minimal-election-ballot] | [small][small-election-ballot] | [full][full-election-ballot] | hamilton Election Record The Election Record are the files required at the end of the election to verify the election and are intended to be posted publicly. There should not be any sensitive data (eg: no guardian private keys) in the record. Artifacts Examples: [minimal][minimal-election-record] | [small][small-election-record] | [full][full-election-record] | hamilton","title":"Sample Data"},{"location":"develop/Sample_Data/#sample-data","text":"To better understand the data formats used by ElectionGuard, sample data is provided here to guide new developers.","title":"Sample Data"},{"location":"develop/Sample_Data/#four-sample-elections","text":"We have provided sample data for four different elections: Minimal - This is the most minimal election manifest file possible, designed to be easy to inspect and quick to develop against for rapid testing. All optional fields have been removed from the election manifest file. The election contains a single Yes/No referendum with a single ballot style in a single geopolitical unit. Small - This is designed to be a relatively small and simple election, but with more complexity than the minimal election. This is a good sample data set to begin understanding more complex ballot types with two or more geopolitical units or ballot styles. Three contests are listed (one of each type: Yes/No Referendum, Select One, and Select n of m), two GP units, two ballot styles, and a small number of recommended optional fields are included. Full - This is a more realistic example for a primary election for a municipality. This ballot contains several geopolitical units with multiple ballot styles and contains all optional metadata fields. This sample has multi-language support and multiple submitted ballot samples. Hamilton General - This is a complete example for a general election for a fictional municipality. This example contains many geopolitical units with multiple ballot styles and demonstrates how political districts overlap. This sample has multi-language support and multiple submitted ballot samples. The Hamilton General example also includes the election private data that includes guardian private keys. More information about the Hamilton General Example can be found in the Election Manifest Documentation .","title":"Four Sample Elections"},{"location":"develop/Sample_Data/#data","text":"","title":"Data"},{"location":"develop/Sample_Data/#election-manifests","text":"The Election Manifest contains all the details of the election (such as contests, candidates, selections, ballot styles, etc.) and is required at the start of an ElectionGuard election. Manifest Examples: [minimal][minimal-election-manifest] | [small][small-election-manifest] | [full][full-election-manifest] | hamilton","title":"Election Manifests"},{"location":"develop/Sample_Data/#submitted-ballots","text":"Submitted Ballots are encrypted ballots that have been cast or spoiled . Cast ballots will be tallied and spoiled ballots are decrypted. Submitted Ballot Examples: [minimal][minimal-election-ballot] | [small][small-election-ballot] | [full][full-election-ballot] | hamilton","title":"Submitted Ballots"},{"location":"develop/Sample_Data/#election-record","text":"The Election Record are the files required at the end of the election to verify the election and are intended to be posted publicly. There should not be any sensitive data (eg: no guardian private keys) in the record. Artifacts Examples: [minimal][minimal-election-record] | [small][small-election-record] | [full][full-election-record] | hamilton","title":"Election Record"},{"location":"develop/Versioning/","text":"Versioning Versioning for ElectionGuard as the Software Development Kit (SDK) may seem complex, particularly between the Specification, the code repositories, and the serialized files in the sample data. To attempt to reduce the complexity, the versioning for ElectionGuard will be as the whole SDK including the serialization, instead of individual components. This is to help the users of ElectionGuard identify the pieces and parts that function together. As an example, a verifier will need to support the same version(s) of ElectionGuard as the election system it is verifying. How It Works SDK version will line up with a specification post 1.0. This is to allow contributors to develop following the ElectionGuard Specification of the SDK and utilize the badge system to indicate what their code supports. Major versions will indicate this top level version consistently across the repositories starting in 1.0. The goal is to keep the Election Record and other serialized files consistent outside of major versions changes. Minor and smaller versions can differ to allow freedom within the code repositories. For example, the latest version python core could be v2.1.1 while the c++ core is at v2.48.0. Current ElectionGuard 1.0 Part Link Release Specification PDF 1.1 Sample Data Unreleased 1.0 Python Core Unreleased 1.4 C++ Core Unreleased 1.0 Python API Unreleased 1.1 React UI Unreleased 1.0 Future ElectionGuard 2.0 Part Link Release Specification Unreleased 2.0 Sample Data Unreleased 2.0 Python Core Unreleased 2.0 C++ Core Unreleased 2.0 Python API Unreleased 2.0 React UI Unreleased 2.0 Previous ElectionGuard 0.95 Part Link Release Specification PDF 0.95 Sample Data Source 0.95 Python Core Source 1.2.2 C++ Core Source 0.1.6 ElectionGuard 0.85 Part Link Release Specification PDF 0.85 C Core Deprecated 1.0 C# Core Deprecated 1.0","title":"Versioning"},{"location":"develop/Versioning/#versioning","text":"Versioning for ElectionGuard as the Software Development Kit (SDK) may seem complex, particularly between the Specification, the code repositories, and the serialized files in the sample data. To attempt to reduce the complexity, the versioning for ElectionGuard will be as the whole SDK including the serialization, instead of individual components. This is to help the users of ElectionGuard identify the pieces and parts that function together. As an example, a verifier will need to support the same version(s) of ElectionGuard as the election system it is verifying.","title":"Versioning"},{"location":"develop/Versioning/#how-it-works","text":"SDK version will line up with a specification post 1.0. This is to allow contributors to develop following the ElectionGuard Specification of the SDK and utilize the badge system to indicate what their code supports. Major versions will indicate this top level version consistently across the repositories starting in 1.0. The goal is to keep the Election Record and other serialized files consistent outside of major versions changes. Minor and smaller versions can differ to allow freedom within the code repositories. For example, the latest version python core could be v2.1.1 while the c++ core is at v2.48.0.","title":"How It Works"},{"location":"develop/Versioning/#current","text":"","title":"Current"},{"location":"develop/Versioning/#electionguard-10","text":"Part Link Release Specification PDF 1.1 Sample Data Unreleased 1.0 Python Core Unreleased 1.4 C++ Core Unreleased 1.0 Python API Unreleased 1.1 React UI Unreleased 1.0","title":"ElectionGuard 1.0"},{"location":"develop/Versioning/#future","text":"","title":"Future"},{"location":"develop/Versioning/#electionguard-20","text":"Part Link Release Specification Unreleased 2.0 Sample Data Unreleased 2.0 Python Core Unreleased 2.0 C++ Core Unreleased 2.0 Python API Unreleased 2.0 React UI Unreleased 2.0","title":"ElectionGuard 2.0"},{"location":"develop/Versioning/#previous","text":"","title":"Previous"},{"location":"develop/Versioning/#electionguard-095","text":"Part Link Release Specification PDF 0.95 Sample Data Source 0.95 Python Core Source 1.2.2 C++ Core Source 0.1.6","title":"ElectionGuard 0.95"},{"location":"develop/Versioning/#electionguard-085","text":"Part Link Release Specification PDF 0.85 C Core Deprecated 1.0 C# Core Deprecated 1.0","title":"ElectionGuard 0.85"},{"location":"elections/College_Park_Maryland_2023/","text":"ElectionGuard in the November 2023 College Park General Election This November will see College Park use the Hart VerityScan scanner with ElectionGuard in a similar configuration to what was used in the Preston Idaho election in 2022 . This year, voters will fill out ballots either by hand or using Hart's Verity TouchWriter . The official tally will be conducted with the Hart system, which will include mail-in ballots scanned with the VerityScan scanner but, because the voters were not present to collect the confirmation code receipt, will not be able to verify that their ballots were included. Vote by mail is a feature of the ElectionGuard 2.0 Specification New Capabilities While the core Hart system and voting process will be identical to the system used in Preston, Idaho the ElectionGuard software will be almost (see below) a full implementation of the 2.0 specification . It incorporates most of the new encryption structures, including a new implementation of guardian architecture and elimination of placeholder votes. A fully new version of the admin and guardian software used to run the key and tally ceremonies has also been developed. The biggest new capability is a full implementation of thresholding. Thresholding enables a quorum of guardians to participate in a tally ceremony rather than requiring all guardians to be present. (College Park will be using 5 guardians with a quorum of 3 to be present to run the tally ceremony.) Each guardian and the ElectionGuard administrator will be assigned their own Surface Go tablet to run the ceremonies and will use Windows Hello to authenticate on their assigned device. Ballot Confirmation Voters will be able to confirm that their votes were counted using Enhanced Voting's Confirmation Code lookup website , as happened in Preston. The ElectionGuard election record will be hosted there as well, enabling independent verifiers to access and confirm the election results. Independent Verification of the College Park Election In order to meet the deadline to support College Park and its integration with Hart, the ElectionGuard software was frozen prior to completion of the full 2.0 implementation. As a result, the software used in College Park will be an implementation hybrid of the 2.0, 1.53, and 1.1 specs (officially 1.91.18). ElectionGuard 1.91.18 should not be used outside of the College Park election The ElectionGuard software used in College Park is not general release software. It is published here for the purposes of creating a public record of the College Park election. While this release creates an independently verifiable set of artifacts, it should not be used in other elections. As a result,there are known aspects of the full 2.0 specification that will not be delivered for November. Specifically, Verification 6 (Adherence to vote limits) and 7.A and 7.B of Verification 7 (Validation of Confirmation codes) were not implemented correctly so cannot be verified. Full support for handling encrypted data was not enabled so Verification 11 (Correctness of decryptions of contest data) and Verification 14 (Correctness of contest data decryptions for challenged ballots) could not be implemented by an independent verifier, either. There are fixes already in place that will be published after College Park, but to meet deployment and QA timelines were not released as part of 1.91.18. While it is not best practice by any means to intentionally omit support of components of independent verifier validations, some validations are more important than others, and the implementation risk of missing our deadlines for College Park outweighed the incremental benefit of delivery of the missing elements. In addition, there are features that are outlined in the 2.0 spec that are not used in the College Park election, and independent verifier support is thus not necessary nor expected for 1.91.18: Ballot chaining Pre-encrypted ballots Instant verification (BallotCheck) Any voting method other than precinct scan Encrypted contest data (write-ins, overvotes/undervotes, extended data) Finally, when the verifier was run initially immediately after the tally ceremony on November 5, a data error was discovered around the extended base hash, causing the MITRE 1.I verification (1.H in the 2.0 Specification) to fail. The error was due to an already-addressed issue regarding equation formulation, yet the desired approach was implemented differently in the verifier versus the production code. Since the core ElectionGuard code could not be updated (due to the code freeze cited above), the verifier was modified to interpret the extended base hash correctly and the election was fully verified according to the precepts agreed to above. The MITRE Requirements document outlines in detail the encryption and election record capabilities adopted by their verifier for College Park. Run the verifier yourself! If you want to run the MITRE verifier yourself, follow the instructions here . The election record for College Park is available at the confirmation code lookup website . Survey and Feedback from Voters In-person voters will be asked to participate in an exit survey, and all College Park residents are welcome to participate in an election survey collecting general election feedback in addition to perspectives on ElectionGuard. Upon survey completion, the Center for Civic Design will publish a report on voter sentiment.","title":"College Park, Maryland 2023"},{"location":"elections/College_Park_Maryland_2023/#electionguard-in-the-november-2023-college-park-general-election","text":"This November will see College Park use the Hart VerityScan scanner with ElectionGuard in a similar configuration to what was used in the Preston Idaho election in 2022 . This year, voters will fill out ballots either by hand or using Hart's Verity TouchWriter . The official tally will be conducted with the Hart system, which will include mail-in ballots scanned with the VerityScan scanner but, because the voters were not present to collect the confirmation code receipt, will not be able to verify that their ballots were included. Vote by mail is a feature of the ElectionGuard 2.0 Specification","title":"ElectionGuard in the November 2023 College Park General Election"},{"location":"elections/College_Park_Maryland_2023/#new-capabilities","text":"While the core Hart system and voting process will be identical to the system used in Preston, Idaho the ElectionGuard software will be almost (see below) a full implementation of the 2.0 specification . It incorporates most of the new encryption structures, including a new implementation of guardian architecture and elimination of placeholder votes. A fully new version of the admin and guardian software used to run the key and tally ceremonies has also been developed. The biggest new capability is a full implementation of thresholding. Thresholding enables a quorum of guardians to participate in a tally ceremony rather than requiring all guardians to be present. (College Park will be using 5 guardians with a quorum of 3 to be present to run the tally ceremony.) Each guardian and the ElectionGuard administrator will be assigned their own Surface Go tablet to run the ceremonies and will use Windows Hello to authenticate on their assigned device.","title":"New Capabilities"},{"location":"elections/College_Park_Maryland_2023/#ballot-confirmation","text":"Voters will be able to confirm that their votes were counted using Enhanced Voting's Confirmation Code lookup website , as happened in Preston. The ElectionGuard election record will be hosted there as well, enabling independent verifiers to access and confirm the election results.","title":"Ballot Confirmation"},{"location":"elections/College_Park_Maryland_2023/#independent-verification-of-the-college-park-election","text":"In order to meet the deadline to support College Park and its integration with Hart, the ElectionGuard software was frozen prior to completion of the full 2.0 implementation. As a result, the software used in College Park will be an implementation hybrid of the 2.0, 1.53, and 1.1 specs (officially 1.91.18). ElectionGuard 1.91.18 should not be used outside of the College Park election The ElectionGuard software used in College Park is not general release software. It is published here for the purposes of creating a public record of the College Park election. While this release creates an independently verifiable set of artifacts, it should not be used in other elections. As a result,there are known aspects of the full 2.0 specification that will not be delivered for November. Specifically, Verification 6 (Adherence to vote limits) and 7.A and 7.B of Verification 7 (Validation of Confirmation codes) were not implemented correctly so cannot be verified. Full support for handling encrypted data was not enabled so Verification 11 (Correctness of decryptions of contest data) and Verification 14 (Correctness of contest data decryptions for challenged ballots) could not be implemented by an independent verifier, either. There are fixes already in place that will be published after College Park, but to meet deployment and QA timelines were not released as part of 1.91.18. While it is not best practice by any means to intentionally omit support of components of independent verifier validations, some validations are more important than others, and the implementation risk of missing our deadlines for College Park outweighed the incremental benefit of delivery of the missing elements. In addition, there are features that are outlined in the 2.0 spec that are not used in the College Park election, and independent verifier support is thus not necessary nor expected for 1.91.18: Ballot chaining Pre-encrypted ballots Instant verification (BallotCheck) Any voting method other than precinct scan Encrypted contest data (write-ins, overvotes/undervotes, extended data) Finally, when the verifier was run initially immediately after the tally ceremony on November 5, a data error was discovered around the extended base hash, causing the MITRE 1.I verification (1.H in the 2.0 Specification) to fail. The error was due to an already-addressed issue regarding equation formulation, yet the desired approach was implemented differently in the verifier versus the production code. Since the core ElectionGuard code could not be updated (due to the code freeze cited above), the verifier was modified to interpret the extended base hash correctly and the election was fully verified according to the precepts agreed to above. The MITRE Requirements document outlines in detail the encryption and election record capabilities adopted by their verifier for College Park. Run the verifier yourself! If you want to run the MITRE verifier yourself, follow the instructions here . The election record for College Park is available at the confirmation code lookup website .","title":"Independent Verification of the College Park Election"},{"location":"elections/College_Park_Maryland_2023/#survey-and-feedback-from-voters","text":"In-person voters will be asked to participate in an exit survey, and all College Park residents are welcome to participate in an election survey collecting general election feedback in addition to perspectives on ElectionGuard. Upon survey completion, the Center for Civic Design will publish a report on voter sentiment.","title":"Survey and Feedback from Voters"},{"location":"elections/Fulton_Wisconsin_2020/","text":"ElectionGuard in the February 2020 Fulton, Wisconsin Special Election In February, 2020, the town of Fulton, Wisconsin, hosted a special election using ElectionGuard in a voting system built in partnership with VotingWorks. This was the first time ElectionGuard was used in a live election, and while the official tally was determined by a hand count, both the VotingWorks system and ElectionGuard recorded the same results that was validated by the hand count. The voting system used programmable smart cards to record and print their ballot as well as create the ElectionGuard encrypted ballot. Voters filled out their ballots using a VotingWorks ballot marking device. The ballot was stored in both VotingWorks and ElectionGuard encrypted versions, and printed for voters to review and deposit into a ballot box. The paper ballots were tabulated using a VotingWorks scanner. Three election guardians oversaw the ElectionGuard tally process. No independent verifier was written. Resources \"Microsoft hopes its technology will help Americans trust voting again\" CNN, Febrary 22, 2020 \"Microsoft\u2019s voting software is getting its first test in a small Wisconsin town\" CNBC, February 18, 2020","title":"Fulton, Wisconsin 2020"},{"location":"elections/Fulton_Wisconsin_2020/#electionguard-in-the-february-2020-fulton-wisconsin-special-election","text":"In February, 2020, the town of Fulton, Wisconsin, hosted a special election using ElectionGuard in a voting system built in partnership with VotingWorks. This was the first time ElectionGuard was used in a live election, and while the official tally was determined by a hand count, both the VotingWorks system and ElectionGuard recorded the same results that was validated by the hand count. The voting system used programmable smart cards to record and print their ballot as well as create the ElectionGuard encrypted ballot. Voters filled out their ballots using a VotingWorks ballot marking device. The ballot was stored in both VotingWorks and ElectionGuard encrypted versions, and printed for voters to review and deposit into a ballot box. The paper ballots were tabulated using a VotingWorks scanner. Three election guardians oversaw the ElectionGuard tally process. No independent verifier was written.","title":"ElectionGuard in the February 2020 Fulton, Wisconsin Special Election"},{"location":"elections/Fulton_Wisconsin_2020/#resources","text":"","title":"Resources"},{"location":"elections/Fulton_Wisconsin_2020/#microsoft-hopes-its-technology-will-help-americans-trust-voting-again-cnn-febrary-22-2020","text":"","title":"\"Microsoft hopes its technology will help Americans trust voting again\" CNN, Febrary 22, 2020"},{"location":"elections/Fulton_Wisconsin_2020/#microsofts-voting-software-is-getting-its-first-test-in-a-small-wisconsin-town-cnbc-february-18-2020","text":"","title":"\"Microsoft\u2019s voting software is getting its first test in a small Wisconsin town\" CNBC, February 18, 2020"},{"location":"elections/Preston_Idaho_2022/","text":"ElectionGuard in the November 2022 General Election New Report to the Election Assistance Commission (EAC) Check out our report to the EAC on the Idaho election. In the Preston, Idaho District #4 General Election, Idaho voters experienced ElectionGuard for the first time. Specifically, they were able to use a confirmation code to see for themselves that their ballot was counted. In total, 40% of voters opted to use the ElectionGuard / Hart option (as opposed to the traditional option of dropping hand-marked paper ballots into a ballot box). Other vendors contributed services and capabilities to showcase how independent verification of elections work: Hart InterCivic integrated ElectionGuard into its Verity precinct scanners; MITRE wrote an independent verifier; and Enhanced Voting provided the confirmation code lookup service. Confirmation Code Lookup Voters were able to confirm that their vote was counted by scanning their confirmation code (or entering the code manually). The election record itself is also available on Enhanced Voting's Confirmation Code Lookup website . Independent Verification MITRE wrote an independent verifier for this election to ensure that ElectionGuard was working correctly. You can go to the Verifier site to see a report of mathematical tests of the ElectionGuard specification. Pilot Q&A's How was the pilot conducted? The ElectionGuard pilot ran alongside the normal election processes. Voters marked their ballots as usual. They used a scanner in the polling place to cast their ballots, instead of putting them in a box to be counted at the election office. The scanner showed them a summary of their vote, and then allowed them to cast the ballot, make changes before casting, or opt to run a BallotCheck. Who was part of the pilot? The pilot took place in Preston, Idaho District #4 on Election Day. Participation was optional - voters in the district could opt-out of the pilot. Poll workers received extra training so they could support voters using ElectionGuard. Two Election Guardians created the locks and keys to set up ElectionGuard. How were the votes counted? The jurisdiction hand-counted the ElectionGuard ballots to record the official tally, but used the results from the ElectionGuard tally and Hart scanner reports as confirmation. The ElectionGuard pilot data was compared to the official results as part of testing the new technology. What made the pilot a success? The pilot was as chance to test the technology in a real environment, demonstrating that: All the parts of ElectionGuard could work together in a live election An independently created Election Verifier could check the results of the tally The Hart scanner with ElectionGuard did not add to voting times or create additional lines or backups The pilot enabled us to learn about the impact on voters, especially whether they: Understood the value and benefits of ElectionGuard Took the opportunity to confirm that their ballot counted Increased their confidence in the accuracy and security of elections.","title":"Preston, Idaho 2022"},{"location":"elections/Preston_Idaho_2022/#electionguard-in-the-november-2022-general-election","text":"New Report to the Election Assistance Commission (EAC) Check out our report to the EAC on the Idaho election. In the Preston, Idaho District #4 General Election, Idaho voters experienced ElectionGuard for the first time. Specifically, they were able to use a confirmation code to see for themselves that their ballot was counted. In total, 40% of voters opted to use the ElectionGuard / Hart option (as opposed to the traditional option of dropping hand-marked paper ballots into a ballot box). Other vendors contributed services and capabilities to showcase how independent verification of elections work: Hart InterCivic integrated ElectionGuard into its Verity precinct scanners; MITRE wrote an independent verifier; and Enhanced Voting provided the confirmation code lookup service.","title":"ElectionGuard in the November 2022 General Election"},{"location":"elections/Preston_Idaho_2022/#confirmation-code-lookup","text":"Voters were able to confirm that their vote was counted by scanning their confirmation code (or entering the code manually). The election record itself is also available on Enhanced Voting's Confirmation Code Lookup website .","title":"Confirmation Code Lookup"},{"location":"elections/Preston_Idaho_2022/#independent-verification","text":"MITRE wrote an independent verifier for this election to ensure that ElectionGuard was working correctly. You can go to the Verifier site to see a report of mathematical tests of the ElectionGuard specification.","title":"Independent Verification"},{"location":"elections/Preston_Idaho_2022/#pilot-qas","text":"How was the pilot conducted? The ElectionGuard pilot ran alongside the normal election processes. Voters marked their ballots as usual. They used a scanner in the polling place to cast their ballots, instead of putting them in a box to be counted at the election office. The scanner showed them a summary of their vote, and then allowed them to cast the ballot, make changes before casting, or opt to run a BallotCheck. Who was part of the pilot? The pilot took place in Preston, Idaho District #4 on Election Day. Participation was optional - voters in the district could opt-out of the pilot. Poll workers received extra training so they could support voters using ElectionGuard. Two Election Guardians created the locks and keys to set up ElectionGuard. How were the votes counted? The jurisdiction hand-counted the ElectionGuard ballots to record the official tally, but used the results from the ElectionGuard tally and Hart scanner reports as confirmation. The ElectionGuard pilot data was compared to the official results as part of testing the new technology. What made the pilot a success? The pilot was as chance to test the technology in a real environment, demonstrating that: All the parts of ElectionGuard could work together in a live election An independently created Election Verifier could check the results of the tally The Hart scanner with ElectionGuard did not add to voting times or create additional lines or backups The pilot enabled us to learn about the impact on voters, especially whether they: Understood the value and benefits of ElectionGuard Took the opportunity to confirm that their ballot counted Increased their confidence in the accuracy and security of elections.","title":"Pilot Q&amp;A's"},{"location":"events/eg_usability_aug_2022/","text":"ElectionGuard Hart Verity Scanner and Usability Convening August 3-5, 2022 Overview This convening is a hybrid event that will be held both virtually on Microsoft Teams and in-person at the Microsoft campus in Redmond, Washington. All times Pacific Daylight Time (PDT). Agenda Wednesday, August 3 ElectionGuard Hart Verity Precinct Scan Implementation and Ecosystem What is ElectionGuard and How Does It Work? [RC Carter, Microsoft] Video | Presentation An Overview of the ElectionGuard Ecosystem [Josh Benaloh, Microsoft] Video | Presentation ElectionGuard Integrated Election Setup (demonstration) [Lee Richardson and Steve Maier, InfernoRed; RC Carter, Microsoft] Video Implementing End-to-End Verifiability in the Verity Voting System: Lessons in ElectionGuard Integration and the Voting Experience (includes demonstration) [Jim Canter, Eugene Konovalenko, and Drew Tinney, Hart] Video | Presentation Generating the Election Record (demonstration) [Lee Richardson and Steve Maier, InfernoRed; RC Carter, Microsoft] Video Confirmation Code Lookup Site (demonstration) [Aaron Wilson, Enhanced Voting] Video Practical ElectionGuard Verifier Implementation (includes demonstration)[Moses Liskov and Dr. John Ramsdell, MITRE] Video | Presentation Thursday, August 4 Usability and Accessibility in US Elections Ballot Marking Device Verification: Can vs. Do [Mike Byrne, Rice University] Video | Presentation | Related publication: \"Can Voters Detect Errors on Their Printed Ballots? Absolutely\" Philip Kortum, Michael D. Byrne, Chidera O. Azubike, Laura E. Roty | Opportunities for Accessibility Innovation with VVSG 2.0 [Whitney Quesenberry, Center for Civic Design] Video | Presentation EAC Perspectives on Accessibility, End-to-End Verifiability, and VVSG 2.0 [Thomas Hicks, Election Assistance Commission] Video | Presentation Panel Discussion: Usability Considerations that Can Improve Security and Independence [Clark Rachfal, American Council of the Blind; Michelle Bishop, MSW, National Disability Rights Network; Diana Mairose, Self Advocates Becoming Empowered; moderated by Rylin Rodgers, Microsoft] Video | View the SABE GoVoter Project Report Voting Method, Accessibility, and Security Innovations Secure Accessible Voting with ElectionGuard [Aaron Wilson, Enhanced Voting] Video | Presentation Implementing End-to-end Verifiability for Vote by Mail [Braden Crimmins, University of Michigan] Video | Presentation What's Next? ElectionGuard 2.0 [Michael Naehrig, Microsoft] Video | Presentation Friday, August 5: Nerd Day 10:00-2:00 Technical discussions focusing on ElectionGuard 2.0 innovations, implementation options, roadmap, and opensource community View the current agenda for Nerd Day","title":"August 2022 ElectionGuard Hart Verity Scanner and Accessibility Convening"},{"location":"events/eg_usability_aug_2022/#electionguard-hart-verity-scanner-and-usability-convening-august-3-5-2022","text":"","title":"ElectionGuard Hart Verity Scanner and Usability Convening August 3-5, 2022"},{"location":"events/eg_usability_aug_2022/#overview","text":"This convening is a hybrid event that will be held both virtually on Microsoft Teams and in-person at the Microsoft campus in Redmond, Washington. All times Pacific Daylight Time (PDT).","title":"Overview"},{"location":"events/eg_usability_aug_2022/#agenda","text":"","title":"Agenda"},{"location":"events/eg_usability_aug_2022/#wednesday-august-3","text":"","title":"Wednesday, August 3"},{"location":"events/eg_usability_aug_2022/#electionguard-hart-verity-precinct-scan-implementation-and-ecosystem","text":"What is ElectionGuard and How Does It Work? [RC Carter, Microsoft] Video | Presentation An Overview of the ElectionGuard Ecosystem [Josh Benaloh, Microsoft] Video | Presentation ElectionGuard Integrated Election Setup (demonstration) [Lee Richardson and Steve Maier, InfernoRed; RC Carter, Microsoft] Video Implementing End-to-End Verifiability in the Verity Voting System: Lessons in ElectionGuard Integration and the Voting Experience (includes demonstration) [Jim Canter, Eugene Konovalenko, and Drew Tinney, Hart] Video | Presentation Generating the Election Record (demonstration) [Lee Richardson and Steve Maier, InfernoRed; RC Carter, Microsoft] Video Confirmation Code Lookup Site (demonstration) [Aaron Wilson, Enhanced Voting] Video Practical ElectionGuard Verifier Implementation (includes demonstration)[Moses Liskov and Dr. John Ramsdell, MITRE] Video | Presentation","title":"ElectionGuard Hart Verity Precinct Scan Implementation and Ecosystem"},{"location":"events/eg_usability_aug_2022/#thursday-august-4","text":"","title":"Thursday, August 4"},{"location":"events/eg_usability_aug_2022/#usability-and-accessibility-in-us-elections","text":"Ballot Marking Device Verification: Can vs. Do [Mike Byrne, Rice University] Video | Presentation | Related publication: \"Can Voters Detect Errors on Their Printed Ballots? Absolutely\" Philip Kortum, Michael D. Byrne, Chidera O. Azubike, Laura E. Roty | Opportunities for Accessibility Innovation with VVSG 2.0 [Whitney Quesenberry, Center for Civic Design] Video | Presentation EAC Perspectives on Accessibility, End-to-End Verifiability, and VVSG 2.0 [Thomas Hicks, Election Assistance Commission] Video | Presentation Panel Discussion: Usability Considerations that Can Improve Security and Independence [Clark Rachfal, American Council of the Blind; Michelle Bishop, MSW, National Disability Rights Network; Diana Mairose, Self Advocates Becoming Empowered; moderated by Rylin Rodgers, Microsoft] Video | View the SABE GoVoter Project Report","title":"Usability and Accessibility in US Elections"},{"location":"events/eg_usability_aug_2022/#voting-method-accessibility-and-security-innovations","text":"Secure Accessible Voting with ElectionGuard [Aaron Wilson, Enhanced Voting] Video | Presentation Implementing End-to-end Verifiability for Vote by Mail [Braden Crimmins, University of Michigan] Video | Presentation What's Next? ElectionGuard 2.0 [Michael Naehrig, Microsoft] Video | Presentation","title":"Voting Method, Accessibility, and Security Innovations"},{"location":"events/eg_usability_aug_2022/#friday-august-5-nerd-day","text":"10:00-2:00 Technical discussions focusing on ElectionGuard 2.0 innovations, implementation options, roadmap, and opensource community View the current agenda for Nerd Day","title":"Friday, August 5: Nerd Day"},{"location":"overview/Glossary/","text":"ElectionGuard Glossary Overview This glossary is intended to provide terms that are applicable to a variety of audiences: Election administrators - Terms that map to their conception of the voting process and user experience Developers - Provides entities, constructs, and a detailed grammar that allows them to solve problems quickly Cryptographers & election technology contributors - Consistency of usage between the specification and programming code, and sufficiently clear descriptions of the techniques and terms necessary for proper treatment and interpretation of the election record and all processes General public - Clear articulation of the meaning and rationale for the different facets of end-to-end verifiability Info ElectionGuard seeks to keep most terms and meanings consistent the NIST Election Results Common Data Format Specification and the Civics Common Standard Data Specification . These can be helpful additions to this glossary. Terms Utilize the search bar to ease searching for a particular terms. There are \"other terms\" sections to reduce the difficulty to search possible outdated or deprecated terms. approval voting Approval voting is a single-winner electoral system where each voter may choose or approve any number of candidates , and the winner is the single candidate approved by the largest number of voters. Approval voting can be achieved by setting the selection limit to the total number of options in a contest . auxiliary key pair A key pair owned by a specific guardian for encryption to securely send information to other guardians. Other terms: auxiliary keys ballot box A term used to represent collection of submitted ballots in programming code mimicking the physical item. ballot chain If the ballots are encrypted in a particular order by an encryption device , this creates a ballot chain. This can be useful for verification purposes because an inserted or removed ballot can be easily detected as a break in the chain. ballot code A unique hash value generated by an encryption device to anonymously identify a ballot and allow the voter to confirm the ballot has been submitted. code is not to be confused with programming code , but is rather a code to confirm the ballot. Other terms: code, confirmation code, ballot confirmation code, verification code (deprecated) ballot decryption Decrypting a secure encrypted ciphertext ballot to a readable plaintext ballot . graph LR a1(ciphertext ballot) -->|decrypt| a2(plaintext ballot) ballot encryption Encrypting a readable plaintext ballot to a secure encrypted ciphertext ballot . graph LR a1(plaintext ballot) -->|encrypt| a2(cipertext ballot) ballot lifecycle The lifecycle the ballot goes through. For ElectionGuard, the ballot goes from a plaintext ballot to a ciphertext ballot to a submitted ballot and then it is either (1) cast, added to tally or (2) spoiled and decrypted during tally ceremony. candidate A candidate is a choice or option on a contest . This can represent a named a named candidate but also word choices like yes or no. Other terms: choice, option cast ballot A ballot which a voter has submitted as cast to be included in the official election tally . Other terms: cast, casting ciphertext ballot An encrypted representation of a voter's filled-in ballot . Other terms: encrypted ballot ciphertext election context The cryptographic context of an election constructed following the key ceremony . This is a programming concept to coordinate the cryptographic information about the election such as the number of guardians and quorum , and joint key . Other terms: election context, context ciphertext tally A ciphertext tally is the homomorphically-combined and encrypted representation of all selections made for each option on every contest in the election. It is an aggregate of all the encrypted cast ballots in the election. The ciphertext tally is the tally while it is is still in the encrypted state. Other terms: aggregate ciphertext ballot compact ballot A compact ballot is an ElectionGuard term for an encrypted or plaintext ballot that contains only the basic information for a ballot to allow for faster performance and smaller data size. The compact ballot saves space by removing information that can be reconstituted like contest info from the manifest or mathematical proofs. compensated decryption share A partial decryption share value computed by an available guardian to compensate for a missing guardian so that the missing guardian's share can be generated and the tally can be successfully decrypted. contest A contest in an manifest consists of a set of candidates or options together with a selection limit . Contests can be customized to suit the voting experience with options like approval voting , ranked-choice voting and write-ins . Contests can have special rules around selection limits to handle undervotes , overvotes , and null votes . decryption share A guardian's partial share of a ballot decryption or tally decryption . election An election in ElectionGuard is an election as described by a manifest . An election will have one encryption key to encrypt ballots and after tally, will result in an election record . election key pair A key pair owned by a specific guardian for joint encryption in combination with the other guardians to secure the election. Other terms: election keys, guardian key pair, guardian keys election partial key backup A point on a secret election polynomial and commitments to verify this point for a designated guardian. Other terms: backup election partial key verification A guardian's verification that a received election partial key backup is valid to ensure decryption can occur with missing guardians in the tally ceremony. Other terms: backup verification election polynomial The election polynomial is the mathematical expression that each guardian uses for encryption. Each guardian has a polynomial where the first coefficient is used to generate their election key pair . A different point associated with the polynomial is shared with each of the other guardians in the key ceremony so that the guardians can come together and decrypt in the tally ceremony . election record A verifiable record of the public artifacts or files of the election. This includes items like the manifest and the encrypted ballots so an individual or third party can verify the election end-to-end. Other terms: record, election artifacts (deprecated) ElectionGuard Core A programming code base that implements fundamental features of the ElectionGuard Specification (such as ballot encryption) to act as a core or central integration. ElectionGuard Specification The specification indicating how ElectionGuard creates end-to-end verifiable elections. See Specification . ElectionGuard SDK The entire set of repositories associated with ElectionGuard. See Repositories . encryption device A device loaded with the election context that performs ballot encryption . encryption seed The encryption seed is the starting number or point for the encryption. The seed is usually a hash either the starting hash from the encryption device or with a ballot chain the hash from the previous ballot. Other terms: seed hash end-to-end-verifiable election End-to-end verifiable election techniques enable individual voters to check crucial ingredients of election results \u2013 without requiring voters to trust election software, hardware, election officials, procedures, or even observers. Voters may check these ingredients themselves, place their trust in others of their choice (e.g. their preferred candidates, news media, and/or interest groups), or accept the outcome produced with the usual administrative safeguards. 1 An end-to-end verifiable election must include two principle components: Cast as intended - Voters can verify that their own selections have been correctly recorded. Counted as cast - Anyone can verify that the recorded votes have been correctly tallied. guardian One of a number of independent, trustworthy individuals who serve guardians in the election. All guardians must participate in a key ceremony to create a key to encrypt the election and may participate in the accompanying tally ceremony(s) to decrypt the tally(s) . A guardian is available if they are available for the tally ceremony. A guardian is missing if they cannot attend the tally ceremony. Other terms: election guardian, missing guardian, available guardian hash Hashing is a common practice in computing as a mechanism to map data of an arbitrary size into a fixed-size equivalent. ElectionGuard uses hashing in its cryptographic context , This is done for a variety of reasons, including preventing discovery of election ballot contents, but also to verify certain information. For example, a hash of the manifest is added to the ballot which can verify the ballot is using the correct manifest. joint key A public encryption key which is the combination the public key of the election key pair of each of the guardians . This key is created as the last step in the key ceremony . Creating a joint public key as part of the key ceremony graph LR a2 & b2 & c2 --> jk1[key ceremony] --> jk2(joint public key) subgraph eg1[guardian 1] a1(private key) -.- a2(public key) end subgraph eg2[guardian 2] b1(private key) -.- b2(public key) end subgraph eg3[guardian n] c1(private key) -.- c2(public key) end Other terms: joint public key, encryption key, ballot encryption key, elgamal key key ceremony The process conducted at the beginning of the election to create the joint key for ballot encryption during the election. In ElectionGuard, each guardian creates an election key pair and shares a recovery method for their decryption with the other election guardians as part of the key ceremony in case that particular guardian cannot attend the tally ceremony . key pair A key pair consists of a linked private key and public key . Key pairs are used in public key cryptography , in which public keys are distributed to others to encrypt messages that only the private key can decrypt . graph LR subgraph kp[key pair] a1(private key) -.- a2(public key) end manifest The manifest is the information that uniquely specifies and describes the structure and type of the election, including geopolitical units, contests, candidates, ballot styles, etc. In ElectionGuard, it is a file that is created before running an election . The internal manifest is a wrapper around the manifest used in programming code to simplify and avoid processing the same information twice. Unlike the manifest, the internal manifest is not meant for serialization. Other terms: election manifest, election description (deprecated) , internal election description (deprecated) mediator A mediator is used to mediate communication (if needed) of information such as keys between the guardians. This can be a person but in ElectionGuard this often refers to the server mediating / coordinating between the guardian machines that maintains all the public information between the key and tally ceremonies. Other terms: key ceremony mediator, tally mediator nonce An arbitrary number used for cryptographic applications particularly encryption. non-interactive-zero-knowledge proof (NIZK) A non-interactive-zero-knowledge proof (NIZK) is a zero-knowledge proof that can be performed without interaction or intervention by the prover. null vote An null vote occurs when no candidate is selected for a contest . Example: A contest where 2 candidate must be selected and 0 are chosen. overvote An overvote occurs when too many candidates are selected for a contest . Example: A contest where 2 candidate must be selected and 3 are chosen. placeholder A legitimate vote in a contest consists of a set of selections with cardinality not exceeding the selection limit of that contest . To accommodate legitimate undervotes or null votes , the internal representation of a contest in programming code is augmented with \u201cplaceholder\u201d options equal in number to the selection limit. Placeholder options are selected as necessary to force the total number of selections made in a contest to be equal to the selection limit. When the selection limit is one, for example, the single placeholder option can be thought of as a \u201cnone of the above\u201d option. With larger selection limits, the number of placeholder options selected corresponds to the number of additional options that a voter could have selected in a contest. plaintext ballot The plaintext representation of a voter's selections. Other terms: ballot plaintext tally A plaintext tally is the summation of votes for each candidate for each contest in the election. The plaintext tally, or just tally, is the decrypted ciphertext tally or decrypted aggregate ballot which contains the election results. Other terms: aggregate ballot, tally, election results post-election audit A post-election audit verifies that the voting equipment used to count ballots during an election properly counts a sample of voted ballots after an election quorum The minimum count of guardians that must be present in order to successfully decrypt the tally . Other terms: threshold ranked-choice voting (RCV) A ranked-choice voting is an electoral system in which voters rank candidates by preference on their ballots. ElectionGuard does not currently support this. risk-limiting audit (RLA) A risk-limiting audit is a post-election audit that provides strong statistical evidence that the election outcome is correct. RLA has a high probability of correcting a wrong outcome. selection A selection or vote is the selected candidate(s) or option(s) in a contest on a voter's ballot. Other terms: ballot selection, candidate selection, vote selection limit The limit of selections that indicates the number of selections that are allowed to be made in that contest . Most contests have a selection limit of one, but a larger selection limit (e.g., select up to three) is not uncommon in certain elections. sequence order The sequence order is a field used to ensure items such as contests, selections, or guardians are in order for functions that require specific ordering. \"In sequence order\" means ordered by increasing sequence order number. spoiled ballot Spoiling allows a voter to turn in their ballot without their ballot being included in the election tally. A spoiled ballot is a ballot the voter has submitted as spoiled . The voter must submit a replacement ballot as their official cast ballot . In ElectionGuard, ballot spoiling is used as a means for voters to challenge the voting machine and force it to reveal the contents of spoiled ballots for public scrutiny. In this way, a spoiled ballot challenges the system and the term challenge ballot is used. The ballot is spoiled after encryption where the machine cannot modify the ballot. Since the ballot will not be used in the official tally, the content of the ballot can be revealed at the same time as the tally allowing a voter to verify the encryption and decryption process. Other terms: spoil, spoiling, challenge ballot submitted ballot A ballot that is submitted for inclusion in the election and is either: cast or spoiled . graph LR a1(encrypted ballot) -->|cast| a2(submitted ballot) a1 --> |spoiled| a2 Other terms: accepted ballot (deprecated) tally ceremony The process of decrypting the encrypted tally to the decrypted tally . The guardians from the key ceremony who are available attend this ceremony. There must be at least enough guardians to meet the quorum . Each guardian will decrypt their decryption shares and their share for each missing guardian. These shares will then be combined to create the decrypted spoiled ballots and decrypted tally . tally decryption Decrypting an encrypted ciphertext tally to a readable plaintext tally to view results. This is essentially the same concept as ballot decryption . graph LR a1(ciphertext tally) -->|decrypt| a2(plaintext tally) STAR Voting Method STAR (an acronym for Score Then Automatic Runoff) voting is an electoral system in which voters rate the candidates for a given office on a scale of zero to five, with zero indicating no support and five indicating maximum support. The scores for all candidates are then tabulated and the top two finishers advance to an automatic runoff, at which time a voter's full vote is assigned to whichever of the two finishers he or she scored highest. The candidate whom a greater number of voters gave a higher score in the runoff is declared the winner. STAR Voting is Presinct Summable and allows homomorphic encryption (simple addition). undervote An undervote occurs when too little candidates are selected for a contest . Example: A contest where 2 candidate must be selected and 1 is chosen. Selecting no candidates at all will result in a null vote . unknown ballot An unknown ballot is a submitted ballot which has not been determined to be cast or spoiled , or that may have been spoiled but is otherwise not published in the election results. write-in A write-in is a candidate or option which does not appear on the manifest 's contest . For ElectionGuard, write-ins are assumed to be explicitly registered or allowed to be lumped into a single \"write-ins\" category for the purpose of verifiable tallying. zero-knowledge proof A zero-knowledge proof is a method by which one party (the prover) can prove to another party (the verifier) that they know a value x , without conveying any information apart from the fact that they know the value x . The essence of zero-knowledge proofs is that it is trivial to prove that one possesses knowledge of certain information by simply revealing it; the challenge is to prove such possession without revealing the information itself or any additional information. 2 End-to-end verifiability \u21a9 Zero-Knowledge Proof from Wikipedia \u21a9","title":"Glossary"},{"location":"overview/Glossary/#electionguard-glossary","text":"","title":"ElectionGuard Glossary"},{"location":"overview/Glossary/#overview","text":"This glossary is intended to provide terms that are applicable to a variety of audiences: Election administrators - Terms that map to their conception of the voting process and user experience Developers - Provides entities, constructs, and a detailed grammar that allows them to solve problems quickly Cryptographers & election technology contributors - Consistency of usage between the specification and programming code, and sufficiently clear descriptions of the techniques and terms necessary for proper treatment and interpretation of the election record and all processes General public - Clear articulation of the meaning and rationale for the different facets of end-to-end verifiability Info ElectionGuard seeks to keep most terms and meanings consistent the NIST Election Results Common Data Format Specification and the Civics Common Standard Data Specification . These can be helpful additions to this glossary.","title":"Overview"},{"location":"overview/Glossary/#terms","text":"Utilize the search bar to ease searching for a particular terms. There are \"other terms\" sections to reduce the difficulty to search possible outdated or deprecated terms.","title":"Terms"},{"location":"overview/Glossary/#approval-voting","text":"Approval voting is a single-winner electoral system where each voter may choose or approve any number of candidates , and the winner is the single candidate approved by the largest number of voters. Approval voting can be achieved by setting the selection limit to the total number of options in a contest .","title":"approval voting"},{"location":"overview/Glossary/#auxiliary-key-pair","text":"A key pair owned by a specific guardian for encryption to securely send information to other guardians.","title":"auxiliary key pair"},{"location":"overview/Glossary/#other-terms-auxiliary-keys","text":"","title":"Other terms: auxiliary keys"},{"location":"overview/Glossary/#ballot-box","text":"A term used to represent collection of submitted ballots in programming code mimicking the physical item.","title":"ballot box"},{"location":"overview/Glossary/#ballot-chain","text":"If the ballots are encrypted in a particular order by an encryption device , this creates a ballot chain. This can be useful for verification purposes because an inserted or removed ballot can be easily detected as a break in the chain.","title":"ballot chain"},{"location":"overview/Glossary/#ballot-code","text":"A unique hash value generated by an encryption device to anonymously identify a ballot and allow the voter to confirm the ballot has been submitted. code is not to be confused with programming code , but is rather a code to confirm the ballot.","title":"ballot code"},{"location":"overview/Glossary/#other-terms-code-confirmation-code-ballot-confirmation-code-verification-code-deprecated","text":"","title":"Other terms: code, confirmation code, ballot confirmation code, verification code (deprecated)"},{"location":"overview/Glossary/#ballot-decryption","text":"Decrypting a secure encrypted ciphertext ballot to a readable plaintext ballot . graph LR a1(ciphertext ballot) -->|decrypt| a2(plaintext ballot)","title":"ballot decryption"},{"location":"overview/Glossary/#ballot-encryption","text":"Encrypting a readable plaintext ballot to a secure encrypted ciphertext ballot . graph LR a1(plaintext ballot) -->|encrypt| a2(cipertext ballot)","title":"ballot encryption"},{"location":"overview/Glossary/#ballot-lifecycle","text":"The lifecycle the ballot goes through. For ElectionGuard, the ballot goes from a plaintext ballot to a ciphertext ballot to a submitted ballot and then it is either (1) cast, added to tally or (2) spoiled and decrypted during tally ceremony.","title":"ballot lifecycle"},{"location":"overview/Glossary/#candidate","text":"A candidate is a choice or option on a contest . This can represent a named a named candidate but also word choices like yes or no.","title":"candidate"},{"location":"overview/Glossary/#other-terms-choice-option","text":"","title":"Other terms: choice, option"},{"location":"overview/Glossary/#cast-ballot","text":"A ballot which a voter has submitted as cast to be included in the official election tally .","title":"cast ballot"},{"location":"overview/Glossary/#other-terms-cast-casting","text":"","title":"Other terms: cast, casting"},{"location":"overview/Glossary/#ciphertext-ballot","text":"An encrypted representation of a voter's filled-in ballot .","title":"ciphertext ballot"},{"location":"overview/Glossary/#other-terms-encrypted-ballot","text":"","title":"Other terms: encrypted ballot"},{"location":"overview/Glossary/#ciphertext-election-context","text":"The cryptographic context of an election constructed following the key ceremony . This is a programming concept to coordinate the cryptographic information about the election such as the number of guardians and quorum , and joint key .","title":"ciphertext election context"},{"location":"overview/Glossary/#other-terms-election-context-context","text":"","title":"Other terms: election context, context"},{"location":"overview/Glossary/#ciphertext-tally","text":"A ciphertext tally is the homomorphically-combined and encrypted representation of all selections made for each option on every contest in the election. It is an aggregate of all the encrypted cast ballots in the election. The ciphertext tally is the tally while it is is still in the encrypted state.","title":"ciphertext tally"},{"location":"overview/Glossary/#other-terms-aggregate-ciphertext-ballot","text":"","title":"Other terms: aggregate ciphertext ballot"},{"location":"overview/Glossary/#compact-ballot","text":"A compact ballot is an ElectionGuard term for an encrypted or plaintext ballot that contains only the basic information for a ballot to allow for faster performance and smaller data size. The compact ballot saves space by removing information that can be reconstituted like contest info from the manifest or mathematical proofs.","title":"compact ballot"},{"location":"overview/Glossary/#compensated-decryption-share","text":"A partial decryption share value computed by an available guardian to compensate for a missing guardian so that the missing guardian's share can be generated and the tally can be successfully decrypted.","title":"compensated decryption share"},{"location":"overview/Glossary/#contest","text":"A contest in an manifest consists of a set of candidates or options together with a selection limit . Contests can be customized to suit the voting experience with options like approval voting , ranked-choice voting and write-ins . Contests can have special rules around selection limits to handle undervotes , overvotes , and null votes .","title":"contest"},{"location":"overview/Glossary/#decryption-share","text":"A guardian's partial share of a ballot decryption or tally decryption .","title":"decryption share"},{"location":"overview/Glossary/#election","text":"An election in ElectionGuard is an election as described by a manifest . An election will have one encryption key to encrypt ballots and after tally, will result in an election record .","title":"election"},{"location":"overview/Glossary/#election-key-pair","text":"A key pair owned by a specific guardian for joint encryption in combination with the other guardians to secure the election.","title":"election key pair"},{"location":"overview/Glossary/#other-terms-election-keys-guardian-key-pair-guardian-keys","text":"","title":"Other terms: election keys, guardian key pair, guardian keys"},{"location":"overview/Glossary/#election-partial-key-backup","text":"A point on a secret election polynomial and commitments to verify this point for a designated guardian.","title":"election partial key backup"},{"location":"overview/Glossary/#other-terms-backup","text":"","title":"Other terms: backup"},{"location":"overview/Glossary/#election-partial-key-verification","text":"A guardian's verification that a received election partial key backup is valid to ensure decryption can occur with missing guardians in the tally ceremony.","title":"election partial key verification"},{"location":"overview/Glossary/#other-terms-backup-verification","text":"","title":"Other terms: backup verification"},{"location":"overview/Glossary/#election-polynomial","text":"The election polynomial is the mathematical expression that each guardian uses for encryption. Each guardian has a polynomial where the first coefficient is used to generate their election key pair . A different point associated with the polynomial is shared with each of the other guardians in the key ceremony so that the guardians can come together and decrypt in the tally ceremony .","title":"election polynomial"},{"location":"overview/Glossary/#election-record","text":"A verifiable record of the public artifacts or files of the election. This includes items like the manifest and the encrypted ballots so an individual or third party can verify the election end-to-end.","title":"election record"},{"location":"overview/Glossary/#other-terms-record-election-artifacts-deprecated","text":"","title":"Other terms: record, election artifacts (deprecated)"},{"location":"overview/Glossary/#electionguard-core","text":"A programming code base that implements fundamental features of the ElectionGuard Specification (such as ballot encryption) to act as a core or central integration.","title":"ElectionGuard Core"},{"location":"overview/Glossary/#electionguard-specification","text":"The specification indicating how ElectionGuard creates end-to-end verifiable elections. See Specification .","title":"ElectionGuard Specification"},{"location":"overview/Glossary/#electionguard-sdk","text":"The entire set of repositories associated with ElectionGuard. See Repositories .","title":"ElectionGuard SDK"},{"location":"overview/Glossary/#encryption-device","text":"A device loaded with the election context that performs ballot encryption .","title":"encryption device"},{"location":"overview/Glossary/#encryption-seed","text":"The encryption seed is the starting number or point for the encryption. The seed is usually a hash either the starting hash from the encryption device or with a ballot chain the hash from the previous ballot.","title":"encryption seed"},{"location":"overview/Glossary/#other-terms-seed-hash","text":"","title":"Other terms: seed hash"},{"location":"overview/Glossary/#end-to-end-verifiable-election","text":"End-to-end verifiable election techniques enable individual voters to check crucial ingredients of election results \u2013 without requiring voters to trust election software, hardware, election officials, procedures, or even observers. Voters may check these ingredients themselves, place their trust in others of their choice (e.g. their preferred candidates, news media, and/or interest groups), or accept the outcome produced with the usual administrative safeguards. 1 An end-to-end verifiable election must include two principle components: Cast as intended - Voters can verify that their own selections have been correctly recorded. Counted as cast - Anyone can verify that the recorded votes have been correctly tallied.","title":"end-to-end-verifiable election"},{"location":"overview/Glossary/#guardian","text":"One of a number of independent, trustworthy individuals who serve guardians in the election. All guardians must participate in a key ceremony to create a key to encrypt the election and may participate in the accompanying tally ceremony(s) to decrypt the tally(s) . A guardian is available if they are available for the tally ceremony. A guardian is missing if they cannot attend the tally ceremony.","title":"guardian"},{"location":"overview/Glossary/#other-terms-election-guardian-missing-guardian-available-guardian","text":"","title":"Other terms: election guardian, missing guardian, available guardian"},{"location":"overview/Glossary/#hash","text":"Hashing is a common practice in computing as a mechanism to map data of an arbitrary size into a fixed-size equivalent. ElectionGuard uses hashing in its cryptographic context , This is done for a variety of reasons, including preventing discovery of election ballot contents, but also to verify certain information. For example, a hash of the manifest is added to the ballot which can verify the ballot is using the correct manifest.","title":"hash"},{"location":"overview/Glossary/#joint-key","text":"A public encryption key which is the combination the public key of the election key pair of each of the guardians . This key is created as the last step in the key ceremony . Creating a joint public key as part of the key ceremony graph LR a2 & b2 & c2 --> jk1[key ceremony] --> jk2(joint public key) subgraph eg1[guardian 1] a1(private key) -.- a2(public key) end subgraph eg2[guardian 2] b1(private key) -.- b2(public key) end subgraph eg3[guardian n] c1(private key) -.- c2(public key) end","title":"joint key"},{"location":"overview/Glossary/#other-terms-joint-public-key-encryption-key-ballot-encryption-key-elgamal-key","text":"","title":"Other terms: joint public key, encryption key, ballot encryption key, elgamal key"},{"location":"overview/Glossary/#key-ceremony","text":"The process conducted at the beginning of the election to create the joint key for ballot encryption during the election. In ElectionGuard, each guardian creates an election key pair and shares a recovery method for their decryption with the other election guardians as part of the key ceremony in case that particular guardian cannot attend the tally ceremony .","title":"key ceremony"},{"location":"overview/Glossary/#key-pair","text":"A key pair consists of a linked private key and public key . Key pairs are used in public key cryptography , in which public keys are distributed to others to encrypt messages that only the private key can decrypt . graph LR subgraph kp[key pair] a1(private key) -.- a2(public key) end","title":"key pair"},{"location":"overview/Glossary/#manifest","text":"The manifest is the information that uniquely specifies and describes the structure and type of the election, including geopolitical units, contests, candidates, ballot styles, etc. In ElectionGuard, it is a file that is created before running an election . The internal manifest is a wrapper around the manifest used in programming code to simplify and avoid processing the same information twice. Unlike the manifest, the internal manifest is not meant for serialization.","title":"manifest"},{"location":"overview/Glossary/#other-terms-election-manifest-election-description-deprecated-internal-election-description-deprecated","text":"","title":"Other terms: election manifest, election description (deprecated), internal election description (deprecated)"},{"location":"overview/Glossary/#mediator","text":"A mediator is used to mediate communication (if needed) of information such as keys between the guardians. This can be a person but in ElectionGuard this often refers to the server mediating / coordinating between the guardian machines that maintains all the public information between the key and tally ceremonies.","title":"mediator"},{"location":"overview/Glossary/#other-terms-key-ceremony-mediator-tally-mediator","text":"","title":"Other terms: key ceremony mediator, tally mediator"},{"location":"overview/Glossary/#nonce","text":"An arbitrary number used for cryptographic applications particularly encryption.","title":"nonce"},{"location":"overview/Glossary/#non-interactive-zero-knowledge-proof-nizk","text":"A non-interactive-zero-knowledge proof (NIZK) is a zero-knowledge proof that can be performed without interaction or intervention by the prover.","title":"non-interactive-zero-knowledge proof (NIZK)"},{"location":"overview/Glossary/#null-vote","text":"An null vote occurs when no candidate is selected for a contest . Example: A contest where 2 candidate must be selected and 0 are chosen.","title":"null vote"},{"location":"overview/Glossary/#overvote","text":"An overvote occurs when too many candidates are selected for a contest . Example: A contest where 2 candidate must be selected and 3 are chosen.","title":"overvote"},{"location":"overview/Glossary/#placeholder","text":"A legitimate vote in a contest consists of a set of selections with cardinality not exceeding the selection limit of that contest . To accommodate legitimate undervotes or null votes , the internal representation of a contest in programming code is augmented with \u201cplaceholder\u201d options equal in number to the selection limit. Placeholder options are selected as necessary to force the total number of selections made in a contest to be equal to the selection limit. When the selection limit is one, for example, the single placeholder option can be thought of as a \u201cnone of the above\u201d option. With larger selection limits, the number of placeholder options selected corresponds to the number of additional options that a voter could have selected in a contest.","title":"placeholder"},{"location":"overview/Glossary/#plaintext-ballot","text":"The plaintext representation of a voter's selections.","title":"plaintext ballot"},{"location":"overview/Glossary/#other-terms-ballot","text":"","title":"Other terms: ballot"},{"location":"overview/Glossary/#plaintext-tally","text":"A plaintext tally is the summation of votes for each candidate for each contest in the election. The plaintext tally, or just tally, is the decrypted ciphertext tally or decrypted aggregate ballot which contains the election results.","title":"plaintext tally"},{"location":"overview/Glossary/#other-terms-aggregate-ballot-tally-election-results","text":"","title":"Other terms: aggregate ballot, tally, election results"},{"location":"overview/Glossary/#post-election-audit","text":"A post-election audit verifies that the voting equipment used to count ballots during an election properly counts a sample of voted ballots after an election","title":"post-election audit"},{"location":"overview/Glossary/#quorum","text":"The minimum count of guardians that must be present in order to successfully decrypt the tally .","title":"quorum"},{"location":"overview/Glossary/#other-terms-threshold","text":"","title":"Other terms: threshold"},{"location":"overview/Glossary/#ranked-choice-voting-rcv","text":"A ranked-choice voting is an electoral system in which voters rank candidates by preference on their ballots. ElectionGuard does not currently support this.","title":"ranked-choice voting (RCV)"},{"location":"overview/Glossary/#risk-limiting-audit-rla","text":"A risk-limiting audit is a post-election audit that provides strong statistical evidence that the election outcome is correct. RLA has a high probability of correcting a wrong outcome.","title":"risk-limiting audit (RLA)"},{"location":"overview/Glossary/#selection","text":"A selection or vote is the selected candidate(s) or option(s) in a contest on a voter's ballot.","title":"selection"},{"location":"overview/Glossary/#other-terms-ballot-selection-candidate-selection-vote","text":"","title":"Other terms: ballot selection, candidate selection, vote"},{"location":"overview/Glossary/#selection-limit","text":"The limit of selections that indicates the number of selections that are allowed to be made in that contest . Most contests have a selection limit of one, but a larger selection limit (e.g., select up to three) is not uncommon in certain elections.","title":"selection limit"},{"location":"overview/Glossary/#sequence-order","text":"The sequence order is a field used to ensure items such as contests, selections, or guardians are in order for functions that require specific ordering. \"In sequence order\" means ordered by increasing sequence order number.","title":"sequence order"},{"location":"overview/Glossary/#spoiled-ballot","text":"Spoiling allows a voter to turn in their ballot without their ballot being included in the election tally. A spoiled ballot is a ballot the voter has submitted as spoiled . The voter must submit a replacement ballot as their official cast ballot . In ElectionGuard, ballot spoiling is used as a means for voters to challenge the voting machine and force it to reveal the contents of spoiled ballots for public scrutiny. In this way, a spoiled ballot challenges the system and the term challenge ballot is used. The ballot is spoiled after encryption where the machine cannot modify the ballot. Since the ballot will not be used in the official tally, the content of the ballot can be revealed at the same time as the tally allowing a voter to verify the encryption and decryption process.","title":"spoiled ballot"},{"location":"overview/Glossary/#other-terms-spoil-spoiling-challenge-ballot","text":"","title":"Other terms: spoil, spoiling, challenge ballot"},{"location":"overview/Glossary/#submitted-ballot","text":"A ballot that is submitted for inclusion in the election and is either: cast or spoiled . graph LR a1(encrypted ballot) -->|cast| a2(submitted ballot) a1 --> |spoiled| a2","title":"submitted ballot"},{"location":"overview/Glossary/#other-terms-accepted-ballot-deprecated","text":"","title":"Other terms: accepted ballot (deprecated)"},{"location":"overview/Glossary/#tally-ceremony","text":"The process of decrypting the encrypted tally to the decrypted tally . The guardians from the key ceremony who are available attend this ceremony. There must be at least enough guardians to meet the quorum . Each guardian will decrypt their decryption shares and their share for each missing guardian. These shares will then be combined to create the decrypted spoiled ballots and decrypted tally .","title":"tally ceremony"},{"location":"overview/Glossary/#tally-decryption","text":"Decrypting an encrypted ciphertext tally to a readable plaintext tally to view results. This is essentially the same concept as ballot decryption . graph LR a1(ciphertext tally) -->|decrypt| a2(plaintext tally)","title":"tally decryption"},{"location":"overview/Glossary/#star-voting-method","text":"STAR (an acronym for Score Then Automatic Runoff) voting is an electoral system in which voters rate the candidates for a given office on a scale of zero to five, with zero indicating no support and five indicating maximum support. The scores for all candidates are then tabulated and the top two finishers advance to an automatic runoff, at which time a voter's full vote is assigned to whichever of the two finishers he or she scored highest. The candidate whom a greater number of voters gave a higher score in the runoff is declared the winner. STAR Voting is Presinct Summable and allows homomorphic encryption (simple addition).","title":"STAR Voting Method"},{"location":"overview/Glossary/#undervote","text":"An undervote occurs when too little candidates are selected for a contest . Example: A contest where 2 candidate must be selected and 1 is chosen. Selecting no candidates at all will result in a null vote .","title":"undervote"},{"location":"overview/Glossary/#unknown-ballot","text":"An unknown ballot is a submitted ballot which has not been determined to be cast or spoiled , or that may have been spoiled but is otherwise not published in the election results.","title":"unknown ballot"},{"location":"overview/Glossary/#write-in","text":"A write-in is a candidate or option which does not appear on the manifest 's contest . For ElectionGuard, write-ins are assumed to be explicitly registered or allowed to be lumped into a single \"write-ins\" category for the purpose of verifiable tallying.","title":"write-in"},{"location":"overview/Glossary/#zero-knowledge-proof","text":"A zero-knowledge proof is a method by which one party (the prover) can prove to another party (the verifier) that they know a value x , without conveying any information apart from the fact that they know the value x . The essence of zero-knowledge proofs is that it is trivial to prove that one possesses knowledge of certain information by simply revealing it; the challenge is to prove such possession without revealing the information itself or any additional information. 2 End-to-end verifiability \u21a9 Zero-Knowledge Proof from Wikipedia \u21a9","title":"zero-knowledge proof"},{"location":"overview/Roadmap/","text":"ElectionGuard Roadmap 2023 Roadmap 2023 targets a fully updated version of the core ElectionGuard specification as well as a new approach to the core software deliverables. Instead of a \"reference implementation\" approach in Python, we are pursuing a C++ core that can deliver production-level performance for encryption. Other programming languages will be supported via templates. The specification itself will accommodate a lot of efficiency improvements and some longstanding feature requests focused on supporting commercial implementations for vendors integrating ElectionGuard into their systems. 2.0 Specification improved encryption speed and more efficient storage reduced verifier complexity range proofs ability to support recounts and additional methods of voting such as vote by mail Single, simplified fully C++-based SDK eliminate problems of serialization and rationalization of challenges working across different languages Upgraded Key and Tally Ceremony user experience production-ready user experience clearer, stepper-based process implements thresholding improved visibility into manifest selection and review Full Guardian Thresholding support ability to specify maximum and quorum number of guardians ability for admins to initiate tally ceremony once quorum has been reached updated thresholding code that simplifies verifier 2022 Roadmap 2022 focused on a full 1.0 release of functionality across the Python and C++ repos. We needed to support a pilot election in Franklin County, Idaho in partnership with Hart InterCivic on their Verity Precinct Scanner. MITRE worked with us to release the first truly full-featured verifier that was used to verify the election results, and Enhanced Voting hosted the confirmation-code-lookup website. 2021 Roadmap The 2021 roadmap takes lessons learned from the deployment of applications during 2020 and rationalizes them into a practice to establish with the community in 2021. The goal is to grow a community of participants and contributors within which Microsoft takes part and provides architectural and implementation guidance, but is fundamentally driven by the needs of the community in establishing the best ways to implement end-to-end verifiable elections and post-election audits. A big step toward this new vision occurred with the release of the electionguard-cpp ballot-encryption repo. The electionguard-python repo implements the full suite of ElectionGuard SDK functionality and the base electionguard specification and documentation repo provides the foundation for future development. The goal for the first half of 2021 is to have a full suite of code, tests, workflows, and package deployments more directly associated with the conventions and requirements indicated by the specification. The goal is also to publish and generate more comprehensive and also more granular examples and use cases to enable easier and more focused contributions by the community. 1.0 Specification a final, fully-developed specification integrated directly into the SDK; updates to election manifest and election artifact descriptions and specifications a more modular approach to documentation and contribution to lessen the learning curve and overhead necessary to participate and contribute more prescriptive guidance on verifier construction C++ ballot encryption library repo that performs encryption exclusively (for embedded encryption applications such as precinct scanners) standalone source that uses a version of HACL* packaged up by EverCrypt for high assurance (thank you EverCrypt team!) enables ElectionGuard to eliminate GMP as a dependency Release an ElectionGuard.Encryption nuget package built from electionguard-cpp as a ballot encrypter for low performance devices Establish publishing pattern First target will be Windows 10 / UWP A consistent, efficient set of data interfaces across the ElectionGuard, C++, and Python repos Data serialization using Protobuf for input/output/data consistency across electionguard-cpp and electionguard-python Restructuring ballot and device aggregation to better support audits and scalability in general Renaming and refactoring all repos for more descriptive and specific naming patterns Compose community changes into electionguard-python release v1.1.16 Optimization changes for service implementations of electionguard-python release v1.4.0 Introduce service docker containers in electionguard-api 2020 In Review 2020 provided many lessons. During the first half of the year ElectionGuard was used successfully as a Pilot in Fulton, WI with the help of VotingWorks and InfernoRed . Subsequent to the pilot ElectionGuard released the Python repo as a new reference implementation. In the second half of the year , responding to COVID, led to the development of a remote voting app with InfernoRed , Markup , and the US House Democratic Caucus to enable representatives to vote by secret ballot safely, securely, and remotely for Caucus leadership positions . In a further collaborate with VotingWorks, Rice University professor Dan Wallach contributed an integration with Arlo to enable ElectionGuard to provide the \"back end\" for Inyo County's Risk-limiting Audit of the November 3 election . Last, and definitely not least, ElectionGuard developed and published its first independent verifiers . 2020 Roadmap Use ElectionGuard in a real-world end-to-end verifiable election Run a verifiable election Fulton, Wisconsin with VotingWorks using smart cards, a ballot box, an admin device, and a ballot tracking site. Integrate ElectionGuard with the VotingWorks print station and user flow Build ballot box functionality to capture and seal ballots Build admin device to enable tallies and key ceremonies Build tracking site to enable verification code lookup and tally/results download Use ElectionGuard in a real-world post-election audit Run a post-election election audit with Inyo, California using VotingWorks Arlo using ElectionGuard as a back end Identify learnings and code refactoring necessary to reflect the different data structures and scalability considerations of audits Update the ElectionGuard Specification to 1.0.0-preview-1 Support building ElectionGuard into additional voting systems Enable remote, secret-ballot voting for Democratic Caucus of the US House of Representatives Work with InfernoRed and Markup to enable House-distributed iPhones to perform ballot encryption and House Democratic leadership to schedule and tally secret-ballot elections for leadership and committee positions Release and iterate on electionguard-python as a core implementation that meets specification 1.0.0-preview-1 Implement a canonical library addressing all ElectionGuard SDK functionality: Key generation Ballot encryption Ballot sealing Tally generation Verifier specification Build library with an eye to extensibility rather than performance and local language optimization (i.e., we'll be less Pythonic than some might prefer for the base implementation) Integrate ElectionGuard into a set of election tools 2019 Roadmap Initial specification and electionguard-c release Demonstrate ElectionGuard Reference Implementation at Aspen Security Conference","title":"Roadmap"},{"location":"overview/Roadmap/#electionguard-roadmap","text":"","title":"ElectionGuard Roadmap"},{"location":"overview/Roadmap/#2023-roadmap","text":"2023 targets a fully updated version of the core ElectionGuard specification as well as a new approach to the core software deliverables. Instead of a \"reference implementation\" approach in Python, we are pursuing a C++ core that can deliver production-level performance for encryption. Other programming languages will be supported via templates. The specification itself will accommodate a lot of efficiency improvements and some longstanding feature requests focused on supporting commercial implementations for vendors integrating ElectionGuard into their systems. 2.0 Specification improved encryption speed and more efficient storage reduced verifier complexity range proofs ability to support recounts and additional methods of voting such as vote by mail Single, simplified fully C++-based SDK eliminate problems of serialization and rationalization of challenges working across different languages Upgraded Key and Tally Ceremony user experience production-ready user experience clearer, stepper-based process implements thresholding improved visibility into manifest selection and review Full Guardian Thresholding support ability to specify maximum and quorum number of guardians ability for admins to initiate tally ceremony once quorum has been reached updated thresholding code that simplifies verifier","title":"2023 Roadmap"},{"location":"overview/Roadmap/#2022-roadmap","text":"2022 focused on a full 1.0 release of functionality across the Python and C++ repos. We needed to support a pilot election in Franklin County, Idaho in partnership with Hart InterCivic on their Verity Precinct Scanner. MITRE worked with us to release the first truly full-featured verifier that was used to verify the election results, and Enhanced Voting hosted the confirmation-code-lookup website.","title":"2022 Roadmap"},{"location":"overview/Roadmap/#2021-roadmap","text":"The 2021 roadmap takes lessons learned from the deployment of applications during 2020 and rationalizes them into a practice to establish with the community in 2021. The goal is to grow a community of participants and contributors within which Microsoft takes part and provides architectural and implementation guidance, but is fundamentally driven by the needs of the community in establishing the best ways to implement end-to-end verifiable elections and post-election audits. A big step toward this new vision occurred with the release of the electionguard-cpp ballot-encryption repo. The electionguard-python repo implements the full suite of ElectionGuard SDK functionality and the base electionguard specification and documentation repo provides the foundation for future development. The goal for the first half of 2021 is to have a full suite of code, tests, workflows, and package deployments more directly associated with the conventions and requirements indicated by the specification. The goal is also to publish and generate more comprehensive and also more granular examples and use cases to enable easier and more focused contributions by the community. 1.0 Specification a final, fully-developed specification integrated directly into the SDK; updates to election manifest and election artifact descriptions and specifications a more modular approach to documentation and contribution to lessen the learning curve and overhead necessary to participate and contribute more prescriptive guidance on verifier construction C++ ballot encryption library repo that performs encryption exclusively (for embedded encryption applications such as precinct scanners) standalone source that uses a version of HACL* packaged up by EverCrypt for high assurance (thank you EverCrypt team!) enables ElectionGuard to eliminate GMP as a dependency Release an ElectionGuard.Encryption nuget package built from electionguard-cpp as a ballot encrypter for low performance devices Establish publishing pattern First target will be Windows 10 / UWP A consistent, efficient set of data interfaces across the ElectionGuard, C++, and Python repos Data serialization using Protobuf for input/output/data consistency across electionguard-cpp and electionguard-python Restructuring ballot and device aggregation to better support audits and scalability in general Renaming and refactoring all repos for more descriptive and specific naming patterns Compose community changes into electionguard-python release v1.1.16 Optimization changes for service implementations of electionguard-python release v1.4.0 Introduce service docker containers in electionguard-api","title":"2021 Roadmap"},{"location":"overview/Roadmap/#2020-in-review","text":"2020 provided many lessons. During the first half of the year ElectionGuard was used successfully as a Pilot in Fulton, WI with the help of VotingWorks and InfernoRed . Subsequent to the pilot ElectionGuard released the Python repo as a new reference implementation. In the second half of the year , responding to COVID, led to the development of a remote voting app with InfernoRed , Markup , and the US House Democratic Caucus to enable representatives to vote by secret ballot safely, securely, and remotely for Caucus leadership positions . In a further collaborate with VotingWorks, Rice University professor Dan Wallach contributed an integration with Arlo to enable ElectionGuard to provide the \"back end\" for Inyo County's Risk-limiting Audit of the November 3 election . Last, and definitely not least, ElectionGuard developed and published its first independent verifiers .","title":"2020 In Review"},{"location":"overview/Roadmap/#2020-roadmap","text":"Use ElectionGuard in a real-world end-to-end verifiable election Run a verifiable election Fulton, Wisconsin with VotingWorks using smart cards, a ballot box, an admin device, and a ballot tracking site. Integrate ElectionGuard with the VotingWorks print station and user flow Build ballot box functionality to capture and seal ballots Build admin device to enable tallies and key ceremonies Build tracking site to enable verification code lookup and tally/results download Use ElectionGuard in a real-world post-election audit Run a post-election election audit with Inyo, California using VotingWorks Arlo using ElectionGuard as a back end Identify learnings and code refactoring necessary to reflect the different data structures and scalability considerations of audits Update the ElectionGuard Specification to 1.0.0-preview-1 Support building ElectionGuard into additional voting systems Enable remote, secret-ballot voting for Democratic Caucus of the US House of Representatives Work with InfernoRed and Markup to enable House-distributed iPhones to perform ballot encryption and House Democratic leadership to schedule and tally secret-ballot elections for leadership and committee positions Release and iterate on electionguard-python as a core implementation that meets specification 1.0.0-preview-1 Implement a canonical library addressing all ElectionGuard SDK functionality: Key generation Ballot encryption Ballot sealing Tally generation Verifier specification Build library with an eye to extensibility rather than performance and local language optimization (i.e., we'll be less Pythonic than some might prefer for the base implementation) Integrate ElectionGuard into a set of election tools","title":"2020 Roadmap"},{"location":"overview/Roadmap/#2019-roadmap","text":"Initial specification and electionguard-c release Demonstrate ElectionGuard Reference Implementation at Aspen Security Conference","title":"2019 Roadmap"},{"location":"spec/","text":"ElectionGuard Official Specifications The official versions of the ElectionGuard Specifications are listed below and stand as the primary source of reference when discussing the ElectionGuard Specification . Each version includes a badge that can be used to quickly display which versions are supported or used by products following the specification. To follow along with the code versioning, see the versioning . Version Specification Recommended Badge 2.0 Download 1.1 Download 1.0 Download 0.95 Download 0.85 Download Release Notes v2.0 2.0 is a major refactor of the ElectionGuard specification. It includes the following capabilities The size of the proofs in the election record has been reduced by more than 90% \u2013 reducing the size of the full election record by about a factor of 3. Computing the proofs takes about 20% less time. Placeholder selections have been eliminated entirely. Guardians are no longer part of the election record as their partial decryptions and proofs have been administratively combined into single full decryptions and proofs. Range proofs are now included to support voting systems like cumulative voting, range voting, STAR-voting, Borda count, and others. A new pre-encrypted ballot format is included to support vote-by-mail, central count, and paper-only poll sites. Support is now available for instant verification allowing voters to confirm the accuracy of challenge ballots without waiting for the election record to be published. New default parameters are used with ln(2) replacing the Euler-Mascheroni constant as the basis for generation of the large prime. The data format of hashes has been clearly described to eliminate ambiguities. v1.0 Updates from previous version The large prime p and corresponding cofactor r were changed to correctly match the result of the process for the derivation of the prime. The equations for generating proofs of ballot correctness have been optimized. Auxiliary keys have been eliminated in favor of using the existing keys for both ordinary and exponential ElGamal encryption. A more flexible structure of ballot chaining has been introduced to allow for non-linear chaining or no chaining at all. Smaller parameters suitable for testing are included. The election record of this version should match that of the prior v0.95 and therefore require no verifier changes (with the exception of using the corrected prime). v0.95 Updates from previous version The large prime p and corresponding cofactor r were changed to move the prime p further from 2^4096. A section specifically about writing verifiers was added. Various small clarifications and corrections were included. v0.85 Initial public release of specification for ElectionGuard","title":"Official"},{"location":"spec/#electionguard-official-specifications","text":"The official versions of the ElectionGuard Specifications are listed below and stand as the primary source of reference when discussing the ElectionGuard Specification . Each version includes a badge that can be used to quickly display which versions are supported or used by products following the specification. To follow along with the code versioning, see the versioning . Version Specification Recommended Badge 2.0 Download 1.1 Download 1.0 Download 0.95 Download 0.85 Download","title":"ElectionGuard Official Specifications"},{"location":"spec/#release-notes","text":"","title":"Release Notes"},{"location":"spec/#v20","text":"2.0 is a major refactor of the ElectionGuard specification. It includes the following capabilities The size of the proofs in the election record has been reduced by more than 90% \u2013 reducing the size of the full election record by about a factor of 3. Computing the proofs takes about 20% less time. Placeholder selections have been eliminated entirely. Guardians are no longer part of the election record as their partial decryptions and proofs have been administratively combined into single full decryptions and proofs. Range proofs are now included to support voting systems like cumulative voting, range voting, STAR-voting, Borda count, and others. A new pre-encrypted ballot format is included to support vote-by-mail, central count, and paper-only poll sites. Support is now available for instant verification allowing voters to confirm the accuracy of challenge ballots without waiting for the election record to be published. New default parameters are used with ln(2) replacing the Euler-Mascheroni constant as the basis for generation of the large prime. The data format of hashes has been clearly described to eliminate ambiguities.","title":"v2.0"},{"location":"spec/#v10","text":"Updates from previous version The large prime p and corresponding cofactor r were changed to correctly match the result of the process for the derivation of the prime. The equations for generating proofs of ballot correctness have been optimized. Auxiliary keys have been eliminated in favor of using the existing keys for both ordinary and exponential ElGamal encryption. A more flexible structure of ballot chaining has been introduced to allow for non-linear chaining or no chaining at all. Smaller parameters suitable for testing are included. The election record of this version should match that of the prior v0.95 and therefore require no verifier changes (with the exception of using the corrected prime).","title":"v1.0"},{"location":"spec/#v095","text":"Updates from previous version The large prime p and corresponding cofactor r were changed to move the prime p further from 2^4096. A section specifically about writing verifiers was added. Various small clarifications and corrections were included.","title":"v0.95"},{"location":"spec/#v085","text":"Initial public release of specification for ElectionGuard","title":"v0.85"},{"location":"use_cases/Precinct_Scan/","text":"Precinct Scan Work in Progress This is a work in progress. Feel free to contribute. Overview By design, the ElectionGuard SDK can be used to enable end-to-end verifiability (e2e-v) in a variety of use cases. This article discusses the \"default\" use case of ElectionGuard: an end-to-end verifiable election that uses precinct scanners where ballots are inserted (and approved) by voters directly 1 . This document aims to provide a \" vertical slice \" of the considerations and practices necessary to add end-to-end verifiability to an existing precinct scanner. We necessarily make assumptions about the compute and storage capabilities of the scanner itself, and the modifications necessary to implement end-to-end verifiability . In so doing, it illustrates the interlocking system of security and encryption that comprises an e2e-v system . Info ElectionGuard relies on slight adaptations of existing voting processes to accommodate different aspects of end-to-end verifiability . For example, many voting jurisdictions already have a procedure called ballot spoiling to handle mistakes voters make when they fill out ballots. A voter may inadvertently fill out a contest incorrectly by selecting more candidates than allowed. When the voter then proceeds to scan the ballot, the scanner stops the ballot and alerts the voter of the overvote ; the voter then has the opportunity, as allowed within the voting regulations and practices of the voting district, to start over with a new ballot; the ballot with the mistake is then spoiled and stored separately to ensure it is not included in the tabulation. ElectionGuard uses this spoil process to enable a voter to test the integrity of the system capturing their vote. Effectively, the voter acts as if they are going to vote, submitting their ballot into the scanner and enabling it to process and interpret the ballot. After the encryption of the ballot has occurred, and the verification code has been generated, the voter can decide NOT to cast this ballot via some kind of option on the summary screen presented by the scanner. End-to-end verifiability mandates that these challenged ballots , unlike cast ballots , be published separately from the tally, and in addition that they be decrypted and published in their decrypted state. When voters use their verification code to look up the provenance of these challenged ballots after the election record have been published, they will be able to see both that the ballot they challenged was NOT included in the tally, and also what its contents would have been if it were. When the contents of a challenged ballot are revealed to the voter and the selections match, their confidence about the provenance of their cast ballot is ideally bolstered. If the contents do not match their expectation, they should be given the means to flag this situation to election administrators to investigate. Thus, challenge ballots serve the dual role of affording voters the opportunity to more meaningfully evaluate the disposition of their voting preferences while also providing a security check on the voting system itself. Because the system has to be prepared for ANY voter to challenge a ballot, and because that challenge occurs AFTER the ElectionGuard encryption has occurred, the scanner has already committed its choice to ElectionGuard. And since the scanner can only encrypt ballots (only the tally process overseen by a quorum of election guardians has the \"power\" to decrypt anything ), the system is forced to act in good faith (if a small and random minority of voters can be relied upon to exercise challenges). This document illustrates these e2e-v concepts in the context of setting up and running an election. It begins with a general discussion of the precinct scan user experience and technical assumptions of scanner capabilities, and then runs an election, outlining where ElectionGuard needs to be integrated and ideally providing any wider security and integrity context for any process alterations that may obtain relative to current general election practice. Current Precinct Scan Voter Experience A typical voter flow for a precinct scan system is illustrated below. After a voter has acquired their ballot, they fill it out by hand or using a ballot marking device. When they finish they proceed to the scanner and insert the completed ballot. The scanner scans and interprets the ballot and generates a cast vote record , an electronic representation of the voter's selections. If all contests in a ballot are filled out properly and interpreted as such by the scanner, the ballot is accepted and the voter is free to leave the voting booth. If the scanner interprets the voter has voted for more options than the ballot contests allow (called an overvote ), the scanner stops the ballot from being deposited into the ballot box and prompts the voter whether they would like to have the ballot returned to fix the discrepancy. If the voter agrees, a poll worker is alerted and the ballot remediated by whatever process obtains, which could involve issuance of a new ballot and \"spoiling\" of the overvoted ballot. The scanner can also determine whether the voter didn't fill out all the contests available (called an undervote ). The scanner can be programmed to follow the same process as an overvote (returning the ballot for remediation), but election administrators often assume the undervote is intentional by the voter. Adapting Precinct Scan for End-to-end Verifiability (E2E-V) Voter Experience As outlined in the Verifiable Election page of the ElectionGuard SDK 2 , for end-to-end verifiability to apply, the precinct scanner itself must provide the following capabilities for each voter: immediately upon scanning the ballot, create an encrypted version of the ballot using the public key generated by the election guardians (see Key Ceremony) present the verification code generated by the encryption to the voter (ideally in paper format) present the means for the voter to cast or challenge (spoil) the ballot Technical Requirements For end-to-end verifiability, the scanner has to implement the user experience described above as well as generate and finalize an encrypted ballot reflecting the voter's selections. ElectionGuard assumes all other e2e-v functions such as key and tally ceremonies are performed independently of the scanner on modern laptop or desktop computers or secure cloud environments. Technical Implementation Overview and Operational Assumptions Precinct scanners, unlike other components of voting systems, are assumed to follow the economics and performance characteristics of embedded devices rather than consumer off-the-shelf (COTS) devices such as laptops. ElectionGuard assumes these devices operate in storage-limited environments more akin to operating systems such as Raspberry Pi than Windows 10. Information transfer (if not base storage) is assumed to occur via USB drives with capacities designed for space-efficient data constructs, not 4096-bit encryptions. To support operation in these environments, ElectionGuard enables an encryption-only library built in C++ from which it can target different standalone package deployments that generate encrypted ballots using a separately-provided public election key. Because encrypted ballots in modern elections can each occupy up to 1MB or more of device storage, ElectionGuard also specifies a dehydration \"process\" that allows a more space-efficient format for local storage and transmission post-election. Prior to initiating the tally and publishing process, these ballots are transferred to an external system and reconsitituted (and validated) by re-executing the encryption process using the dehydrated data as inputs. (See the discussions around ballot construction, chaining, etc., below to understand how dehydration should not affect system integrity or end-to-end verifiability.) General Election Setup Elections can be considered to have three core \"states\": the election itself, where voters cast their ballots, but also election setup and post-election data collection and tally publishing. ElectionGuard necessarily manifests in each state. Election setup generally consists of preparing the voting machines for the current election contests, running any pre-production testing, and final configuration for election readiness. For ElectionGuard, the public election key generated by the election guardians is deployed to the scanner at this time and, if necessary, the ElectionGuard executable (the scanner is assumed to be entirely offline and code and election-related data is transferred via USB storage devices). Poll workers should also be prompted to manually enter an election launch code (see below) generated uniquely for the current election at election instantiation. In modern US elections, voters often vote multiple contests, determined by the type of election they're voting in and where they live. Because of the diversity of contests that different voters are eligible to vote in [even within a single county or precinct (imagine school districts, utility districts, city councillors, etc.)], a single precinct scanner may need to recognize and interpret tens or even hundreds of different ballot styles in a single election. Ballot manifest Consider a ballot manifest the master list of all the contests voters could face in a single election. ElectionGuard assumes and validates the ballot manifest for a variety of criteria . ElectionGuard uses manifests to properly interpret ballots generally, but for records created by precinct scanners the manifest provides the means to reconstitute the encrypted ballots from the dehydrated records created. Strictly speaking, the ballot manifest isn't necessary for ElectionGuard until the tally process evaluates the encrypted ballots generated during the election, but the precinct scanner needs to encode ballots and votes properly for their downstream construction, and that is dependent on the unique ballot styles presented to voters, which themselves need to follow proper convention as well. Public encryption key One of the core innovations of ElectionGuard is the use of multiple election guardians to administer the creation of the election record. Guardians are intended to be independent, trustworthy individuals. They don't need to have technical skills, but they do need to physically perform tasks collectively with the other guardians at the beginning and end of elections. As part of the election setup process, or any time prior, the guardians meet to create the public key that will be used by the precinct scanner to encrypt voter ballots. The Logic and Accuracy Testing Scanner Final Production Setup Launch Code Scanner Election Operation Ballot Encryption Generation of Verification Code Ballot Chaining Ballot Dehydration Dehydrated ballot structure A dehydrated ballot must provide the following data to be properly rehydrated and preserve end-to-end verifiability. Label Type Description Notes ballot_object_id string Unique ID to identify each ballot in an election session_id string Unique ID to enable the correct sorting of the election ballot chain when rehydrated needs to be resilient across device restarts and other service interruptions launch_code integer 10-digit ID generated at election initiation by rolling of 10-sided dice used to protect against attacks to insert votes outside of election context. See insert reference here ballot_style_id string Uniquely identifies the set of contests and responses a voter encounters with their ballot Used as part of the rehydration and tally processes to ensure the ballot is correctly interpreted and reconstituted ballot_finalization_indicator flag Indicates whether ballot is CAST or CHALLENGED applied by scanner based on determination by voter ballot_selections array Set of responses (and, as applicable, non-responses) of voter to ballot style reflective of non-selections; critical for rehydration and re-establishment of ballot encryption artifacts ballot_extra_data array Additional data applied at contest level to capture non-selection data Principally envisioned for capturing ballot selection metadata for write-ins; each entry needs to identify contest and selection as well as extra data string ballot_nonce ? The nonce used as input to the encryption of the ballot selections See spec on Ballot Encryption previous_tracker_hash ? As discussed in ballot chaining the previous_tracker_hash is an input to the current ballot encryption See spec on Ballot Encryption verification_code_hash ? Hashed version of verification code generated by ballot encryption process Ballot Finalization Cast ballots Challenge ballots As distinct from scanners used solely for central tabulation, which occurs with mail-in voting or any tabulation / aggregation scenario where voters are not present when the cast vote record is created \u21a9 ElectionGuard Verifiable Election [https://www.electionguard.vote/guide/Verifiable_Election/] \u21a9","title":"Precinct Scan"},{"location":"use_cases/Precinct_Scan/#precinct-scan","text":"Work in Progress This is a work in progress. Feel free to contribute.","title":"Precinct Scan"},{"location":"use_cases/Precinct_Scan/#overview","text":"By design, the ElectionGuard SDK can be used to enable end-to-end verifiability (e2e-v) in a variety of use cases. This article discusses the \"default\" use case of ElectionGuard: an end-to-end verifiable election that uses precinct scanners where ballots are inserted (and approved) by voters directly 1 . This document aims to provide a \" vertical slice \" of the considerations and practices necessary to add end-to-end verifiability to an existing precinct scanner. We necessarily make assumptions about the compute and storage capabilities of the scanner itself, and the modifications necessary to implement end-to-end verifiability . In so doing, it illustrates the interlocking system of security and encryption that comprises an e2e-v system . Info ElectionGuard relies on slight adaptations of existing voting processes to accommodate different aspects of end-to-end verifiability . For example, many voting jurisdictions already have a procedure called ballot spoiling to handle mistakes voters make when they fill out ballots. A voter may inadvertently fill out a contest incorrectly by selecting more candidates than allowed. When the voter then proceeds to scan the ballot, the scanner stops the ballot and alerts the voter of the overvote ; the voter then has the opportunity, as allowed within the voting regulations and practices of the voting district, to start over with a new ballot; the ballot with the mistake is then spoiled and stored separately to ensure it is not included in the tabulation. ElectionGuard uses this spoil process to enable a voter to test the integrity of the system capturing their vote. Effectively, the voter acts as if they are going to vote, submitting their ballot into the scanner and enabling it to process and interpret the ballot. After the encryption of the ballot has occurred, and the verification code has been generated, the voter can decide NOT to cast this ballot via some kind of option on the summary screen presented by the scanner. End-to-end verifiability mandates that these challenged ballots , unlike cast ballots , be published separately from the tally, and in addition that they be decrypted and published in their decrypted state. When voters use their verification code to look up the provenance of these challenged ballots after the election record have been published, they will be able to see both that the ballot they challenged was NOT included in the tally, and also what its contents would have been if it were. When the contents of a challenged ballot are revealed to the voter and the selections match, their confidence about the provenance of their cast ballot is ideally bolstered. If the contents do not match their expectation, they should be given the means to flag this situation to election administrators to investigate. Thus, challenge ballots serve the dual role of affording voters the opportunity to more meaningfully evaluate the disposition of their voting preferences while also providing a security check on the voting system itself. Because the system has to be prepared for ANY voter to challenge a ballot, and because that challenge occurs AFTER the ElectionGuard encryption has occurred, the scanner has already committed its choice to ElectionGuard. And since the scanner can only encrypt ballots (only the tally process overseen by a quorum of election guardians has the \"power\" to decrypt anything ), the system is forced to act in good faith (if a small and random minority of voters can be relied upon to exercise challenges). This document illustrates these e2e-v concepts in the context of setting up and running an election. It begins with a general discussion of the precinct scan user experience and technical assumptions of scanner capabilities, and then runs an election, outlining where ElectionGuard needs to be integrated and ideally providing any wider security and integrity context for any process alterations that may obtain relative to current general election practice.","title":"Overview"},{"location":"use_cases/Precinct_Scan/#current-precinct-scan-voter-experience","text":"A typical voter flow for a precinct scan system is illustrated below. After a voter has acquired their ballot, they fill it out by hand or using a ballot marking device. When they finish they proceed to the scanner and insert the completed ballot. The scanner scans and interprets the ballot and generates a cast vote record , an electronic representation of the voter's selections. If all contests in a ballot are filled out properly and interpreted as such by the scanner, the ballot is accepted and the voter is free to leave the voting booth. If the scanner interprets the voter has voted for more options than the ballot contests allow (called an overvote ), the scanner stops the ballot from being deposited into the ballot box and prompts the voter whether they would like to have the ballot returned to fix the discrepancy. If the voter agrees, a poll worker is alerted and the ballot remediated by whatever process obtains, which could involve issuance of a new ballot and \"spoiling\" of the overvoted ballot. The scanner can also determine whether the voter didn't fill out all the contests available (called an undervote ). The scanner can be programmed to follow the same process as an overvote (returning the ballot for remediation), but election administrators often assume the undervote is intentional by the voter.","title":"Current Precinct Scan Voter Experience"},{"location":"use_cases/Precinct_Scan/#adapting-precinct-scan-for-end-to-end-verifiability-e2e-v","text":"","title":"Adapting Precinct Scan for End-to-end Verifiability (E2E-V)"},{"location":"use_cases/Precinct_Scan/#voter-experience","text":"As outlined in the Verifiable Election page of the ElectionGuard SDK 2 , for end-to-end verifiability to apply, the precinct scanner itself must provide the following capabilities for each voter: immediately upon scanning the ballot, create an encrypted version of the ballot using the public key generated by the election guardians (see Key Ceremony) present the verification code generated by the encryption to the voter (ideally in paper format) present the means for the voter to cast or challenge (spoil) the ballot","title":"Voter Experience"},{"location":"use_cases/Precinct_Scan/#technical-requirements","text":"For end-to-end verifiability, the scanner has to implement the user experience described above as well as generate and finalize an encrypted ballot reflecting the voter's selections. ElectionGuard assumes all other e2e-v functions such as key and tally ceremonies are performed independently of the scanner on modern laptop or desktop computers or secure cloud environments.","title":"Technical Requirements"},{"location":"use_cases/Precinct_Scan/#technical-implementation","text":"","title":"Technical Implementation"},{"location":"use_cases/Precinct_Scan/#overview-and-operational-assumptions","text":"Precinct scanners, unlike other components of voting systems, are assumed to follow the economics and performance characteristics of embedded devices rather than consumer off-the-shelf (COTS) devices such as laptops. ElectionGuard assumes these devices operate in storage-limited environments more akin to operating systems such as Raspberry Pi than Windows 10. Information transfer (if not base storage) is assumed to occur via USB drives with capacities designed for space-efficient data constructs, not 4096-bit encryptions. To support operation in these environments, ElectionGuard enables an encryption-only library built in C++ from which it can target different standalone package deployments that generate encrypted ballots using a separately-provided public election key. Because encrypted ballots in modern elections can each occupy up to 1MB or more of device storage, ElectionGuard also specifies a dehydration \"process\" that allows a more space-efficient format for local storage and transmission post-election. Prior to initiating the tally and publishing process, these ballots are transferred to an external system and reconsitituted (and validated) by re-executing the encryption process using the dehydrated data as inputs. (See the discussions around ballot construction, chaining, etc., below to understand how dehydration should not affect system integrity or end-to-end verifiability.)","title":"Overview and Operational Assumptions"},{"location":"use_cases/Precinct_Scan/#general-election-setup","text":"Elections can be considered to have three core \"states\": the election itself, where voters cast their ballots, but also election setup and post-election data collection and tally publishing. ElectionGuard necessarily manifests in each state. Election setup generally consists of preparing the voting machines for the current election contests, running any pre-production testing, and final configuration for election readiness. For ElectionGuard, the public election key generated by the election guardians is deployed to the scanner at this time and, if necessary, the ElectionGuard executable (the scanner is assumed to be entirely offline and code and election-related data is transferred via USB storage devices). Poll workers should also be prompted to manually enter an election launch code (see below) generated uniquely for the current election at election instantiation. In modern US elections, voters often vote multiple contests, determined by the type of election they're voting in and where they live. Because of the diversity of contests that different voters are eligible to vote in [even within a single county or precinct (imagine school districts, utility districts, city councillors, etc.)], a single precinct scanner may need to recognize and interpret tens or even hundreds of different ballot styles in a single election.","title":"General Election Setup"},{"location":"use_cases/Precinct_Scan/#ballot-manifest","text":"Consider a ballot manifest the master list of all the contests voters could face in a single election. ElectionGuard assumes and validates the ballot manifest for a variety of criteria . ElectionGuard uses manifests to properly interpret ballots generally, but for records created by precinct scanners the manifest provides the means to reconstitute the encrypted ballots from the dehydrated records created. Strictly speaking, the ballot manifest isn't necessary for ElectionGuard until the tally process evaluates the encrypted ballots generated during the election, but the precinct scanner needs to encode ballots and votes properly for their downstream construction, and that is dependent on the unique ballot styles presented to voters, which themselves need to follow proper convention as well.","title":"Ballot manifest"},{"location":"use_cases/Precinct_Scan/#public-encryption-key","text":"One of the core innovations of ElectionGuard is the use of multiple election guardians to administer the creation of the election record. Guardians are intended to be independent, trustworthy individuals. They don't need to have technical skills, but they do need to physically perform tasks collectively with the other guardians at the beginning and end of elections. As part of the election setup process, or any time prior, the guardians meet to create the public key that will be used by the precinct scanner to encrypt voter ballots. The","title":"Public encryption key"},{"location":"use_cases/Precinct_Scan/#logic-and-accuracy-testing","text":"","title":"Logic and Accuracy Testing"},{"location":"use_cases/Precinct_Scan/#scanner-final-production-setup","text":"","title":"Scanner Final Production Setup"},{"location":"use_cases/Precinct_Scan/#launch-code","text":"","title":"Launch Code"},{"location":"use_cases/Precinct_Scan/#scanner-election-operation","text":"","title":"Scanner Election Operation"},{"location":"use_cases/Precinct_Scan/#ballot-encryption","text":"","title":"Ballot Encryption"},{"location":"use_cases/Precinct_Scan/#generation-of-verification-code","text":"","title":"Generation of Verification Code"},{"location":"use_cases/Precinct_Scan/#ballot-chaining","text":"","title":"Ballot Chaining"},{"location":"use_cases/Precinct_Scan/#ballot-dehydration","text":"","title":"Ballot Dehydration"},{"location":"use_cases/Precinct_Scan/#dehydrated-ballot-structure","text":"A dehydrated ballot must provide the following data to be properly rehydrated and preserve end-to-end verifiability. Label Type Description Notes ballot_object_id string Unique ID to identify each ballot in an election session_id string Unique ID to enable the correct sorting of the election ballot chain when rehydrated needs to be resilient across device restarts and other service interruptions launch_code integer 10-digit ID generated at election initiation by rolling of 10-sided dice used to protect against attacks to insert votes outside of election context. See insert reference here ballot_style_id string Uniquely identifies the set of contests and responses a voter encounters with their ballot Used as part of the rehydration and tally processes to ensure the ballot is correctly interpreted and reconstituted ballot_finalization_indicator flag Indicates whether ballot is CAST or CHALLENGED applied by scanner based on determination by voter ballot_selections array Set of responses (and, as applicable, non-responses) of voter to ballot style reflective of non-selections; critical for rehydration and re-establishment of ballot encryption artifacts ballot_extra_data array Additional data applied at contest level to capture non-selection data Principally envisioned for capturing ballot selection metadata for write-ins; each entry needs to identify contest and selection as well as extra data string ballot_nonce ? The nonce used as input to the encryption of the ballot selections See spec on Ballot Encryption previous_tracker_hash ? As discussed in ballot chaining the previous_tracker_hash is an input to the current ballot encryption See spec on Ballot Encryption verification_code_hash ? Hashed version of verification code generated by ballot encryption process","title":"Dehydrated ballot structure"},{"location":"use_cases/Precinct_Scan/#ballot-finalization","text":"","title":"Ballot Finalization"},{"location":"use_cases/Precinct_Scan/#cast-ballots","text":"","title":"Cast ballots"},{"location":"use_cases/Precinct_Scan/#challenge-ballots","text":"As distinct from scanners used solely for central tabulation, which occurs with mail-in voting or any tabulation / aggregation scenario where voters are not present when the cast vote record is created \u21a9 ElectionGuard Verifiable Election [https://www.electionguard.vote/guide/Verifiable_Election/] \u21a9","title":"Challenge ballots"},{"location":"use_cases/Rescans_and_Recounts/","text":"Rescans and Recounts Warning This is a documented but not currently implemented capability. See the Roadmap for implementation details and status. Overview In the course of an election with paper ballots, occasions may arise when all or some of the ballots in an election may need to be rescanned without being in the presence of the voter. For example, if a precinct scanner fails on election day, some municipalities may require a new scanner to be activated and the ballots scanned through the failed scanner to be re-scanned in the new scanner; those rescans would likely not be conducted in the presence of the affected voters, and the verification codes generated from the subsequent scans would not be available to them. Similarly, some elections require multiple recounts, including hand tallies, to resolve challenges or recounts triggered by narrow margins of victory. Ballots may be included or excluded from subsequent recounts dependent on the interpretation of the scans or their inclusion or exclusion in the the subsequent tallies. Info Depending on how the ballot is encrypted (such as whether ballot-chaining is being used), the verification codes generated in the rescan would not be the same. The \"default\" implementation of ElectionGuard, which uses the unique ID of the device performing the encryption as part of the encryption itself, would generate a different verification code if the same ballot is scanned on a different device. If ballot-chaining or any time-based component were included in the encryption, even subsequent scans of the same ballot on the same scanner would generate a different verification code. When a voter checks whether their ballot was included in the ElectionGuard published artifacts, the information should reflect whether the ballot was included (and even more importantly not included) in any subsequent tallies published by the election administration. This must be accomplished without undermining the core integrity and privacy concerns of the verification processes. Warning The proposed process mandates a unique ballot identifier be generated by the host voting system (not ElectionGuard), printed on the ballot, and captured as part of the ElectionGuard metadata. Proposed Approach To maintain the security and integrity of the original election record, rescans and recounts are guardian-based processes. This requirement presents potentially significant additional compute both for the local guardian device / hardware security module and any cloud-based approach to scale the cross-tally mapping. Encrypting a Unique Ballot ID Since a rescan or recount can occur on any independent device, the information for mapping must be present on and derived from the paper ballot itself. Specifically, in addition to all the contests and candidates, there must be an ID unique to the election printed on the ballot. When scanned by the scanner, that ID is included in the encrypted ballot metadata encrypted by the auxiliary guardian RSA key separate from the El Gamal encryption 1 used for the ballot contents. Alert Municipalities that do not allow the printing of unique identifiers on their paper ballots cannot use ElectionGuard for the rescan scenario, since there is no way to perform any mapping across independent tallies Diffing an Election Invoking a Rescan or Recount After the base ElectionGuard verifiable tally has been generated (and, optionally, published) a rescan or recount can be performed. Optimizing the Compute Because the primary joint public key is an ElGamal key, it is optimized for the ones and zeroes that constitute the contents of a ballot, not the generic string values necessary to support arbitrary IDs. \u21a9","title":"Rescans and Recounts"},{"location":"use_cases/Rescans_and_Recounts/#rescans-and-recounts","text":"Warning This is a documented but not currently implemented capability. See the Roadmap for implementation details and status.","title":"Rescans and Recounts"},{"location":"use_cases/Rescans_and_Recounts/#overview","text":"In the course of an election with paper ballots, occasions may arise when all or some of the ballots in an election may need to be rescanned without being in the presence of the voter. For example, if a precinct scanner fails on election day, some municipalities may require a new scanner to be activated and the ballots scanned through the failed scanner to be re-scanned in the new scanner; those rescans would likely not be conducted in the presence of the affected voters, and the verification codes generated from the subsequent scans would not be available to them. Similarly, some elections require multiple recounts, including hand tallies, to resolve challenges or recounts triggered by narrow margins of victory. Ballots may be included or excluded from subsequent recounts dependent on the interpretation of the scans or their inclusion or exclusion in the the subsequent tallies. Info Depending on how the ballot is encrypted (such as whether ballot-chaining is being used), the verification codes generated in the rescan would not be the same. The \"default\" implementation of ElectionGuard, which uses the unique ID of the device performing the encryption as part of the encryption itself, would generate a different verification code if the same ballot is scanned on a different device. If ballot-chaining or any time-based component were included in the encryption, even subsequent scans of the same ballot on the same scanner would generate a different verification code. When a voter checks whether their ballot was included in the ElectionGuard published artifacts, the information should reflect whether the ballot was included (and even more importantly not included) in any subsequent tallies published by the election administration. This must be accomplished without undermining the core integrity and privacy concerns of the verification processes. Warning The proposed process mandates a unique ballot identifier be generated by the host voting system (not ElectionGuard), printed on the ballot, and captured as part of the ElectionGuard metadata.","title":"Overview"},{"location":"use_cases/Rescans_and_Recounts/#proposed-approach","text":"To maintain the security and integrity of the original election record, rescans and recounts are guardian-based processes. This requirement presents potentially significant additional compute both for the local guardian device / hardware security module and any cloud-based approach to scale the cross-tally mapping.","title":"Proposed Approach"},{"location":"use_cases/Rescans_and_Recounts/#encrypting-a-unique-ballot-id","text":"Since a rescan or recount can occur on any independent device, the information for mapping must be present on and derived from the paper ballot itself. Specifically, in addition to all the contests and candidates, there must be an ID unique to the election printed on the ballot. When scanned by the scanner, that ID is included in the encrypted ballot metadata encrypted by the auxiliary guardian RSA key separate from the El Gamal encryption 1 used for the ballot contents. Alert Municipalities that do not allow the printing of unique identifiers on their paper ballots cannot use ElectionGuard for the rescan scenario, since there is no way to perform any mapping across independent tallies","title":"Encrypting a Unique Ballot ID"},{"location":"use_cases/Rescans_and_Recounts/#diffing-an-election","text":"","title":"Diffing an Election"},{"location":"use_cases/Rescans_and_Recounts/#invoking-a-rescan-or-recount","text":"After the base ElectionGuard verifiable tally has been generated (and, optionally, published) a rescan or recount can be performed.","title":"Invoking a Rescan or Recount"},{"location":"use_cases/Rescans_and_Recounts/#optimizing-the-compute","text":"Because the primary joint public key is an ElGamal key, it is optimized for the ones and zeroes that constitute the contents of a ballot, not the generic string values necessary to support arbitrary IDs. \u21a9","title":"Optimizing the Compute"}]}