{
  "$schema": "http://json-schema.org/draft-07/schema",
  "$id": "https://electionguard.vote/schemas/range-proofs/ciphertext-ballot",
  "title": "Ciphertext Ballot",
  "type": "object",
  "required": [
    "object_id",
    "style_id",
    "manifest_hash",
    "code_seed",
    "contests",
    "code",
    "timestamp",
    "crypto_hash",
    "nonce"
  ],
  "definitions": {
    "SequenceOrder": {
      "title": "Sequence Order",
      "description": "Used for ordering in a ballot to ensure various encryption primitives are deterministic.",
      "type": "integer",
      "minimum": 1
    },
    "ElementModP": {
      "title": "ElementModP",
      "description": "An element of the larger `mod p` space, i.e., in [0, P), where P is a 4096-bit prime.",
      "type": "string"
    },
    "ElementModQ": {
      "title": "ElementModQ",
      "description": "An element of the smaller `mod q` space, i.e., in [0, Q), where Q is a 256-bit prime.",
      "type": "string"
    },
    "ElGamalCiphertext": {
      "title": "ElGamal Ciphertext",
      "description": "An exponential ElGamal ciphertext",
      "type": "object",
      "required": ["pad", "data"],
      "properties": {
        "pad": {
          "title": "Pad",
          "description": "pad or alpha",
          "$ref": "#/definitions/ElementModQ"
        },
        "data": {
          "title": "Data",
          "description": "encrypted data or beta",
          "$ref": "#/definitions/ElementModQ"
        }
      }
    },
    "HashedElGamalCiphertext": {
      "title": "Hashed ElGamal Ciphertext",
      "description": "A hashed version of ElGamal Ciphertext with less size restrictions.",
      "type": "object",
      "required": ["pad", "data", "mac"],
      "properties": {
        "pad": {
          "title": "Pad",
          "description": "pad or alpha",
          "$ref": "#/definitions/ElementModP"
        },
        "data": {
          "title": "Data",
          "description": "encrypted data or beta",
          "type": "string"
        },
        "mac": {
          "title": "MAC",
          "description": "message authentication code for hmac",
          "type": "string"
        }
      }
    },
    "ProofUsage": {
      "title": "Proof Usage",
      "description": "Usage case for proof",
      "type": "string",
      "enum": [
        "Unknown",
        "Prove knowledge of secret value",
        "Prove value is a given constant",
        "Prove value is within a given range (0, 1, ..., or limit)"
      ],
      "default": "Unknown"
    },
    "RangeChaumPedersenProof": {
      "title": "Range Chaum-Pedersen Proof",
      "description": "Representation of range Chaum-Pederson proof",
      "type": "object",
      "required": [
        "commitments",
        "challenges",
        "responses",
        "limit",
        "usage"
      ],
      "properties": {
        "commitments": {
          "title": "Commitments",
          "description": "List of commitments a0, b0, a1, b1, ..., aL, bL",
          "type": "array",
          "minItems": 4,
          "items": {
            "title": "Items",
            "$ref": "#/definitions/ElementModP"
          }
        },
        "challenges": {
          "title": "Challenges",
          "description": "List of challenges c0, c1, ..., cL, c",
          "type": "array",
          "minItems": 3,
          "items": {
            "title": "Items",
            "$ref": "#/definitions/ElementModQ"
          }
        },
        "responses": {
          "title": "Responses",
          "description": "List of responses v0, v1, ..., vL",
          "type": "array",
          "minItems": 2,
          "items": {
            "title": "Items",
            "$ref": "#/definitions/ElementModQ"
          }
        },
        "limit": {
          "title": "Selection limit",
          "description": "L in the spec",
          "type": "integer"
        },
        "usage": {
          "title": "Usage",
          "description": "A description of how to use this proof",
          "$ref": "#/definitions/ProofUsage",
          "default": "Prove value is within a given range (0, 1, ..., or limit)"
        }
      }
    },
    "CiphertextBallotSelection": {
      "title": "Ciphertext Ballot Selection",
      "description": "A CiphertextBallotSelection represents an individual encrypted selection on a ballot.",
      "type": "object",
      "required": [
        "object_id",
        "sequence_order",
        "description_hash",
        "ciphertext",
        "crypto_hash",
        "nonce",
        "proof",
        "selection_limit"
      ],
      "properties": {
        "object_id": {
          "title": "Object_id",
          "type": "string"
        },
        "sequence_order": {
          "title": "Sequence Order",
          "description": "Used for ordering in a ballot to ensure various encryption primitives are deterministic.",
          "$ref": "#/definitions/SequenceOrder"
        },
        "description_hash": {
          "title": "Description_hash",
          "description": "The SelectionDescription hash",
          "$ref": "#/definitions/ElementModQ"
        },
        "ciphertext": {
          "title": "Ciphertext",
          "description": "The encrypted representation of the vote field",
          "$ref": "#/definitions/ElGamalCiphertext"
        },
        "crypto_hash": {
          "title": "Crypto Hash",
          "description": "The hash of the encrypted values",
          "$ref": "#/definitions/ElementModQ"
        },
        "nonce": {
          "title": "Nonce",
          "description": "The nonce used to generate the encryption. Sensitive & should be treated as a secret",
          "oneOf": [
            { "type": "null" },
            { "$ref": "#/definitions/ElementModQ" }
          ],
          "default": null
        },
        "proof": {
          "title": "Proof",
          "description": "The proof that demonstrates the selection is an encryption of 0, 1, ..., limit, and was encrypted using the `nonce`",
          "oneOf": [
            { "type": "null" },
            { "$ref": "#/definitions/RangeChaumPedersenProof" }
          ],
          "default": null
        },
        "selection_limit": {
          "title": "Selection Limit",
          "description": "Maximum number of votes allowed for the selection",
          "type": "integer"
        }
      }
    },
    "CiphertextBallotContest": {
      "title": "Ciphertext Ballot Contest",
      "description": "A CiphertextBallotContest represents the selections made by a voter for a specific ContestDescription.",
      "type": "object",
      "required": [
        "object_id",
        "sequence_order",
        "description_hash",
        "ballot_selections",
        "ciphertext_accumulation",
        "crypto_hash",
        "contest_limit",
        "nonce",
        "proof",
        "extended_data"
      ],
      "properties": {
        "object_id": {
          "title": "Object Id",
          "type": "string"
        },
        "sequence_order": {
          "title": "Sequence Order",
          "description": "Used for ordering in a ballot to ensure various encryption primitives are deterministic.",
          "$ref": "#/definitions/SequenceOrder"
        },
        "description_hash": {
          "title": "Description Hash",
          "description": "Hash from contestDescription",
          "$ref": "#/definitions/ElementModQ"
        },
        "ballot_selections": {
          "title": "Ballot_selections",
          "type": "array",
          "minItems": 1,
          "items": {
            "title": "Items",
            "$ref": "#/definitions/CiphertextBallotSelection"
          }
        },
        "ciphertext_accumulation": {
          "title": "Ciphertext Accumulation",
          "description": "The encrypted representation of all of the vote fields (the contest total)",
          "$ref": "#/definitions/ElGamalCiphertext"
        },
        "crypto_hash": {
          "title": "Crypto Hash",
          "description": "Hash of the encrypted values",
          "$ref": "#/definitions/ElementModQ"
        },
        "contest_limit": {
          "title": "Contest Limit",
          "description": "Maximum total number of votes allowed across all selections for the contest",
          "type": "integer"
        },
        "nonce": {
          "title": "Nonce",
          "description": "The nonce used to generate the encryption. Sensitive & should be treated as a secret",
          "oneOf": [
            { "type": "null" },
            { "$ref": "#/definitions/ElementModQ" }
          ],
          "default": null
        },
        "proof": {
          "title": "Proof",
          "description": "The proof that demonstrates the sum of values encrypted in the selections does not exceed the maximum available for the contest",
          "oneOf": [
            { "type": "null" },
            { "$ref": "#/definitions/RangeChaumPedersenProof" }
          ],
          "default": null
        },
        "extended_data": {
          "title": "Extended Data",
          "description": "Encrypted representation of the extended_data field",
          "oneOf": [
            { "type": "null" },
            { "$ref": "#/definitions/HashedElGamalCiphertext" }
          ],
          "default": null
        }
      }
    }
  },
  "properties": {
    "object_id": {
      "title": "Object Id",
      "type": "string"
    },
    "style_id": {
      "title": "Style Id",
      "description": "The `object_id` of the `BallotStyle` in the `Election` Manifest",
      "type": "string"
    },
    "manifest_hash": {
      "title": "Manifest Hash",
      "description": "Hash of the election manifest",
      "$ref": "#/definitions/ElementModQ"
    },
    "code_seed": {
      "title": "Code_seed",
      "description": "Seed for ballot code",
      "$ref": "#/definitions/ElementModQ"
    },
    "contests": {
      "title": "Contests",
      "description": "List of contests for this ballot",
      "type": "array",
      "minItems": 1,
      "items": {
        "title": "Items",
        "$ref": "#/definitions/CiphertextBallotContest"
      }
    },
    "code": {
      "title": "Code",
      "description": "Unique ballot code for this ballot",
      "$ref": "#/definitions/ElementModQ"
    },
    "timestamp": {
      "title": "Timestamp",
      "description": "Timestamp at which the ballot encryption is generated in tick",
      "type": "integer"
    },
    "crypto_hash": {
      "title": "Crypto Hash",
      "description": "The hash of the encrypted ballot representation",
      "$ref": "#/definitions/ElementModQ"
    },
    "nonce": {
      "title": "Nonce",
      "description": "The nonce used to encrypt this ballot. Sensitive & should be treated as a secret",
      "oneOf": [{ "type": "null" }, { "$ref": "#/definitions/ElementModQ" }],
      "default": null
    }
  }
}
